---
version: 2
interactions:
    - id: 0
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 5
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: |
            null
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0-SDK/0.15.1
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_8yq21qxhWtFQi0aM
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_8yq21qxhWtFQi0aM","options":{"mfa":{"active":true,"return_enroll_settings":true},"import_mode":false,"configuration":{"test":""},"customScripts":{"login":"function login(email, password, callback) {\n  // This script should authenticate a user against the credentials stored in\n  // your database.\n  // It is executed when a user attempts to log in or immediately after signing\n  // up (as a verification that the user was successfully signed up).\n  //\n  // Everything returned by this script will be set as part of the user profile\n  // and will be visible by any of the tenant admins. Avoid adding attributes\n  // with values such as passwords, keys, secrets, etc.\n  //\n  // The `password` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database. For example:\n  //\n  //     var bcrypt = require(''bcrypt@0.8.5'');\n  //     bcrypt.compare(password, dbPasswordHash, function(err, res)) { ... }\n  //\n  // There are three ways this script can finish:\n  // 1. The user''s credentials are valid. The returned user profile should be in\n  // the following format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema\n  //     var profile = {\n  //       user_id: ..., // user_id is mandatory\n  //       email: ...,\n  //       [...]\n  //     };\n  //     callback(null, profile);\n  // 2. The user''s credentials are invalid\n  //     callback(new WrongUsernameOrPasswordError(email, \"my error message\"));\n  //\n  //    Note: Passing no arguments or a falsey first argument to\n  //    `WrongUsernameOrPasswordError` will result in the error being logged as\n  //    an `fu` event (invalid username/email) with an empty string for a user_id.\n  //    Providing a truthy first argument will result in the error being logged\n  //    as an `fp` event (the user exists, but the password is invalid) with a\n  //    user_id value of \"auth0|<first argument>\". See the `Log Event Type Codes`\n  //    documentation for more information about these event types:\n  //    https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n  //\n  // A list of Node.js modules which can be referenced is available here:\n  //\n  //    https://tehsis.github.io/webtaskio-canirequire/\n\n  const msg = ''Please implement the Login script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","create":"function create(user, callback) {\n  // This script should create a user entry in your existing database. It will\n  // be executed when a user attempts to sign up, or when a user is created\n  // through the Auth0 dashboard or API.\n  // When this script has finished executing, the Login script will be\n  // executed immediately afterwards, to verify that the user was created\n  // successfully.\n  //\n  // The user object will always contain the following properties:\n  // * email: the user''s email\n  // * password: the password entered by the user, in plain text\n  // * tenant: the name of this Auth0 account\n  // * client_id: the client ID of the application where the user signed up, or\n  //              API key if created through the API or Auth0 dashboard\n  // * connection: the name of this database connection\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully created\n  //     callback(null);\n  // 2. This user already exists in your database\n  //     callback(new ValidationError(\"user_exists\", \"my error message\"));\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Create script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","delete":"function remove(id, callback) {\n  // This script remove a user from your existing database.\n  // It is executed whenever a user is deleted from the API or Auth0 dashboard.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user was removed successfully:\n  //     callback(null);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Delete script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","verify":"function verify(email, callback) {\n  // This script should mark the current user''s email address as verified in\n  // your database.\n  // It is executed whenever a user clicks the verification link sent by email.\n  // These emails can be customized at https://manage.auth0.com/#/emails.\n  // It is safe to assume that the user''s email already exists in your database,\n  // because verification emails, if enabled, are sent immediately after a\n  // successful signup.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user''s email was verified successfully\n  //     callback(null, true);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the verification link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Verify script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","get_user":"function getByEmail(email, callback) {\n  // This script should retrieve a user profile from your existing database,\n  // without authenticating the user.\n  // It is used to check if a user exists before executing flows that do not\n  // require authentication (signup and password reset).\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully found. The profile should be in the following\n  // format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema.\n  //     callback(null, profile);\n  // 2. A user was not found\n  //     callback(null);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Get User script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","change_password":"function changePassword(email, newPassword, callback) {\n  // This script should change the password stored for the current user in your\n  // database. It is executed when the user clicks on the confirmation link\n  // after a reset password request.\n  // The content and behavior of password confirmation emails can be customized\n  // here: https://manage.auth0.com/#/emails\n  // The `newPassword` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database.\n  //\n  // There are three ways that this script can finish:\n  // 1. The user''s password was updated successfully:\n  //     callback(null, true);\n  // 2. The user''s password was not updated:\n  //     callback(null, false);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the confirmation link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Change Password script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n"},"disable_signup":false,"passwordPolicy":"good","password_history":{"size":5,"enable":false},"strategy_version":2,"requires_username":false,"password_dictionary":{"enable":false,"dictionary":[]},"brute_force_protection":true,"password_no_personal_info":{"enable":false},"password_complexity_options":{"min_length":8},"enabledDatabaseCustomization":true},"strategy":"auth0","name":"Unmanaged-Secrets","is_domain_connection":false,"enabled_clients":[],"realms":["Unmanaged-Secrets"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 165.854583ms
    - id: 1
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 5
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: |
            null
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0-SDK/0.15.1
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_8yq21qxhWtFQi0aM
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_8yq21qxhWtFQi0aM","options":{"mfa":{"active":true,"return_enroll_settings":true},"import_mode":false,"configuration":{"test":""},"customScripts":{"login":"function login(email, password, callback) {\n  // This script should authenticate a user against the credentials stored in\n  // your database.\n  // It is executed when a user attempts to log in or immediately after signing\n  // up (as a verification that the user was successfully signed up).\n  //\n  // Everything returned by this script will be set as part of the user profile\n  // and will be visible by any of the tenant admins. Avoid adding attributes\n  // with values such as passwords, keys, secrets, etc.\n  //\n  // The `password` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database. For example:\n  //\n  //     var bcrypt = require(''bcrypt@0.8.5'');\n  //     bcrypt.compare(password, dbPasswordHash, function(err, res)) { ... }\n  //\n  // There are three ways this script can finish:\n  // 1. The user''s credentials are valid. The returned user profile should be in\n  // the following format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema\n  //     var profile = {\n  //       user_id: ..., // user_id is mandatory\n  //       email: ...,\n  //       [...]\n  //     };\n  //     callback(null, profile);\n  // 2. The user''s credentials are invalid\n  //     callback(new WrongUsernameOrPasswordError(email, \"my error message\"));\n  //\n  //    Note: Passing no arguments or a falsey first argument to\n  //    `WrongUsernameOrPasswordError` will result in the error being logged as\n  //    an `fu` event (invalid username/email) with an empty string for a user_id.\n  //    Providing a truthy first argument will result in the error being logged\n  //    as an `fp` event (the user exists, but the password is invalid) with a\n  //    user_id value of \"auth0|<first argument>\". See the `Log Event Type Codes`\n  //    documentation for more information about these event types:\n  //    https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n  //\n  // A list of Node.js modules which can be referenced is available here:\n  //\n  //    https://tehsis.github.io/webtaskio-canirequire/\n\n  const msg = ''Please implement the Login script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","create":"function create(user, callback) {\n  // This script should create a user entry in your existing database. It will\n  // be executed when a user attempts to sign up, or when a user is created\n  // through the Auth0 dashboard or API.\n  // When this script has finished executing, the Login script will be\n  // executed immediately afterwards, to verify that the user was created\n  // successfully.\n  //\n  // The user object will always contain the following properties:\n  // * email: the user''s email\n  // * password: the password entered by the user, in plain text\n  // * tenant: the name of this Auth0 account\n  // * client_id: the client ID of the application where the user signed up, or\n  //              API key if created through the API or Auth0 dashboard\n  // * connection: the name of this database connection\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully created\n  //     callback(null);\n  // 2. This user already exists in your database\n  //     callback(new ValidationError(\"user_exists\", \"my error message\"));\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Create script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","delete":"function remove(id, callback) {\n  // This script remove a user from your existing database.\n  // It is executed whenever a user is deleted from the API or Auth0 dashboard.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user was removed successfully:\n  //     callback(null);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Delete script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","verify":"function verify(email, callback) {\n  // This script should mark the current user''s email address as verified in\n  // your database.\n  // It is executed whenever a user clicks the verification link sent by email.\n  // These emails can be customized at https://manage.auth0.com/#/emails.\n  // It is safe to assume that the user''s email already exists in your database,\n  // because verification emails, if enabled, are sent immediately after a\n  // successful signup.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user''s email was verified successfully\n  //     callback(null, true);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the verification link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Verify script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","get_user":"function getByEmail(email, callback) {\n  // This script should retrieve a user profile from your existing database,\n  // without authenticating the user.\n  // It is used to check if a user exists before executing flows that do not\n  // require authentication (signup and password reset).\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully found. The profile should be in the following\n  // format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema.\n  //     callback(null, profile);\n  // 2. A user was not found\n  //     callback(null);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Get User script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","change_password":"function changePassword(email, newPassword, callback) {\n  // This script should change the password stored for the current user in your\n  // database. It is executed when the user clicks on the confirmation link\n  // after a reset password request.\n  // The content and behavior of password confirmation emails can be customized\n  // here: https://manage.auth0.com/#/emails\n  // The `newPassword` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database.\n  //\n  // There are three ways that this script can finish:\n  // 1. The user''s password was updated successfully:\n  //     callback(null, true);\n  // 2. The user''s password was not updated:\n  //     callback(null, false);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the confirmation link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Change Password script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n"},"disable_signup":false,"passwordPolicy":"good","password_history":{"size":5,"enable":false},"strategy_version":2,"requires_username":false,"password_dictionary":{"enable":false,"dictionary":[]},"brute_force_protection":true,"password_no_personal_info":{"enable":false},"password_complexity_options":{"min_length":8},"enabledDatabaseCustomization":true},"strategy":"auth0","name":"Unmanaged-Secrets","is_domain_connection":false,"enabled_clients":[],"realms":["Unmanaged-Secrets"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 97.477375ms
    - id: 2
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 5
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: |
            null
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0-SDK/0.15.1
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_8yq21qxhWtFQi0aM
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_8yq21qxhWtFQi0aM","options":{"mfa":{"active":true,"return_enroll_settings":true},"import_mode":false,"configuration":{"test":""},"customScripts":{"login":"function login(email, password, callback) {\n  // This script should authenticate a user against the credentials stored in\n  // your database.\n  // It is executed when a user attempts to log in or immediately after signing\n  // up (as a verification that the user was successfully signed up).\n  //\n  // Everything returned by this script will be set as part of the user profile\n  // and will be visible by any of the tenant admins. Avoid adding attributes\n  // with values such as passwords, keys, secrets, etc.\n  //\n  // The `password` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database. For example:\n  //\n  //     var bcrypt = require(''bcrypt@0.8.5'');\n  //     bcrypt.compare(password, dbPasswordHash, function(err, res)) { ... }\n  //\n  // There are three ways this script can finish:\n  // 1. The user''s credentials are valid. The returned user profile should be in\n  // the following format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema\n  //     var profile = {\n  //       user_id: ..., // user_id is mandatory\n  //       email: ...,\n  //       [...]\n  //     };\n  //     callback(null, profile);\n  // 2. The user''s credentials are invalid\n  //     callback(new WrongUsernameOrPasswordError(email, \"my error message\"));\n  //\n  //    Note: Passing no arguments or a falsey first argument to\n  //    `WrongUsernameOrPasswordError` will result in the error being logged as\n  //    an `fu` event (invalid username/email) with an empty string for a user_id.\n  //    Providing a truthy first argument will result in the error being logged\n  //    as an `fp` event (the user exists, but the password is invalid) with a\n  //    user_id value of \"auth0|<first argument>\". See the `Log Event Type Codes`\n  //    documentation for more information about these event types:\n  //    https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n  //\n  // A list of Node.js modules which can be referenced is available here:\n  //\n  //    https://tehsis.github.io/webtaskio-canirequire/\n\n  const msg = ''Please implement the Login script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","create":"function create(user, callback) {\n  // This script should create a user entry in your existing database. It will\n  // be executed when a user attempts to sign up, or when a user is created\n  // through the Auth0 dashboard or API.\n  // When this script has finished executing, the Login script will be\n  // executed immediately afterwards, to verify that the user was created\n  // successfully.\n  //\n  // The user object will always contain the following properties:\n  // * email: the user''s email\n  // * password: the password entered by the user, in plain text\n  // * tenant: the name of this Auth0 account\n  // * client_id: the client ID of the application where the user signed up, or\n  //              API key if created through the API or Auth0 dashboard\n  // * connection: the name of this database connection\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully created\n  //     callback(null);\n  // 2. This user already exists in your database\n  //     callback(new ValidationError(\"user_exists\", \"my error message\"));\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Create script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","delete":"function remove(id, callback) {\n  // This script remove a user from your existing database.\n  // It is executed whenever a user is deleted from the API or Auth0 dashboard.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user was removed successfully:\n  //     callback(null);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Delete script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","verify":"function verify(email, callback) {\n  // This script should mark the current user''s email address as verified in\n  // your database.\n  // It is executed whenever a user clicks the verification link sent by email.\n  // These emails can be customized at https://manage.auth0.com/#/emails.\n  // It is safe to assume that the user''s email already exists in your database,\n  // because verification emails, if enabled, are sent immediately after a\n  // successful signup.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user''s email was verified successfully\n  //     callback(null, true);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the verification link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Verify script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","get_user":"function getByEmail(email, callback) {\n  // This script should retrieve a user profile from your existing database,\n  // without authenticating the user.\n  // It is used to check if a user exists before executing flows that do not\n  // require authentication (signup and password reset).\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully found. The profile should be in the following\n  // format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema.\n  //     callback(null, profile);\n  // 2. A user was not found\n  //     callback(null);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Get User script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","change_password":"function changePassword(email, newPassword, callback) {\n  // This script should change the password stored for the current user in your\n  // database. It is executed when the user clicks on the confirmation link\n  // after a reset password request.\n  // The content and behavior of password confirmation emails can be customized\n  // here: https://manage.auth0.com/#/emails\n  // The `newPassword` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database.\n  //\n  // There are three ways that this script can finish:\n  // 1. The user''s password was updated successfully:\n  //     callback(null, true);\n  // 2. The user''s password was not updated:\n  //     callback(null, false);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the confirmation link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Change Password script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n"},"disable_signup":false,"passwordPolicy":"good","password_history":{"size":5,"enable":false},"strategy_version":2,"requires_username":false,"password_dictionary":{"enable":false,"dictionary":[]},"brute_force_protection":true,"password_no_personal_info":{"enable":false},"password_complexity_options":{"min_length":8},"enabledDatabaseCustomization":true},"strategy":"auth0","name":"Unmanaged-Secrets","is_domain_connection":false,"enabled_clients":[],"realms":["Unmanaged-Secrets"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 100.853166ms
    - id: 3
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0-SDK/0.15.1
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_8yq21qxhWtFQi0aM
        method: DELETE
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: 41
        uncompressed: false
        body: '{"deleted_at":"2023-03-01T17:42:46.132Z"}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 202 Accepted
        code: 202
        duration: 158.756083ms
