---
version: 2
interactions:
    - id: 0
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_xxxxxxxxxxxxxxxx
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"statusCode":404,"error":"Not Found","message":"The connection does not exist","errorCode":"inexistent_connection"}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 404 Not Found
        code: 404
        duration: 489.277708ms
    - id: 1
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 85
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: |
            {"name":"Acceptance-Test-Connection-TestAccDataSourceConnection","strategy":"auth0"}
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections
        method: POST
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: 564
        uncompressed: false
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","strategy_version":2,"authentication_methods":{"password":{"enabled":true},"passkey":{"enabled":false}},"passkey_options":{"challenge_ui":"both","progressive_enrollment_enabled":true,"local_enrollment_enabled":true},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":[],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 201 Created
        code: 201
        duration: 485.926083ms
    - id: 2
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":[],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 388.365ms
    - id: 3
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 153
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: |
            {"name":"Acceptance Test - TestAccDataSourceConnection","app_type":"non_interactive","token_endpoint_auth_method":"client_secret_post","oidc_logout":{}}
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/clients
        method: POST
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: false
        body: '{"name":"Acceptance Test - TestAccDataSourceConnection","client_id":"19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","client_secret":"[REDACTED]","app_type":"non_interactive","is_first_party":true,"is_token_endpoint_ip_header_trusted":false,"oidc_conformant":false,"jwt_configuration":{"secret_encoded":false,"lifetime_in_seconds":36000},"signing_keys":[{"cert":"[REDACTED]"}],"sso_disabled":false,"cross_origin_authentication":false,"grant_types":["authorization_code","implicit","refresh_token","client_credentials"],"custom_login_page_on":true,"token_endpoint_auth_method":"client_secret_post","refresh_token":{"rotation_type":"non-rotating","expiration_type":"non-expiring","leeway":0,"token_lifetime":31557600,"infinite_token_lifetime":true,"infinite_idle_token_lifetime":true,"idle_token_lifetime":2592000},"oidc_backchannel_logout":{},"oidc_logout":{"backchannel_logout_initiators":{"mode":"custom","selected_initiators":["rp-logout","idp-logout"]}}}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 201 Created
        code: 201
        duration: 630.380917ms
    - id: 4
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/clients/19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"name":"Acceptance Test - TestAccDataSourceConnection","client_id":"19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","client_secret":"[REDACTED]","app_type":"non_interactive","is_first_party":true,"is_token_endpoint_ip_header_trusted":false,"oidc_conformant":false,"jwt_configuration":{"secret_encoded":false,"lifetime_in_seconds":36000},"signing_keys":[{"cert":"[REDACTED]"}],"sso_disabled":false,"cross_origin_authentication":false,"grant_types":["authorization_code","implicit","refresh_token","client_credentials"],"custom_login_page_on":true,"token_endpoint_auth_method":"client_secret_post","refresh_token":{"rotation_type":"non-rotating","expiration_type":"non-expiring","leeway":0,"token_lifetime":31557600,"infinite_token_lifetime":true,"infinite_idle_token_lifetime":true,"idle_token_lifetime":2592000},"oidc_backchannel_logout":{},"oidc_logout":{"backchannel_logout_initiators":{"mode":"custom","selected_initiators":["rp-logout","idp-logout"]}}}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 440.747375ms
    - id: 5
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":[],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 367.980875ms
    - id: 6
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 57
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: |
            {"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"]}
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: PATCH
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 957.793375ms
    - id: 7
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 385.705ms
    - id: 8
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections?include_totals=true&per_page=50&take=100
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"connections":[{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"],"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"]},{"id":"con_1UIbZoO6NXBz5Byh","options":{"type":"back_channel","issuer":"https://example.okta.com","jwks_uri":"https://example.okta.com/oauth2/v1/keys","client_id":"1234567","attribute_map":{"mapping_mode":"basic_profile"},"client_secret":"1234567","schema_version":"oidc-V4","token_endpoint":"https://example.okta.com/oauth2/v1/token","userinfo_endpoint":null,"connection_settings":{"pkce":"auto"},"authorization_endpoint":"https://example.okta.com/oauth2/v1/authorize"},"strategy":"okta","name":"Acceptance-Test-Enterprise-Connection-testaccorganizationconnection","is_domain_connection":false,"show_as_button":false,"display_name":"testaccorganizationconnection","realms":["Acceptance-Test-Enterprise-Connection-testaccorganizationconnection"],"enabled_clients":["JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_qGfQLHT8pZxc1Pak","options":{"type":"back_channel","issuer":"https://example.okta.com","jwks_uri":"https://example.okta.com/oauth2/v1/keys","client_id":"1234567","attribute_map":{"mapping_mode":"basic_profile"},"client_secret":"1234567","schema_version":"oidc-V4","token_endpoint":"https://example.okta.com/oauth2/v1/token","userinfo_endpoint":null,"connection_settings":{"pkce":"auto"},"authorization_endpoint":"https://example.okta.com/oauth2/v1/authorize"},"strategy":"okta","name":"Acceptance-Test-SCIM-Connection-TestAccDataSCIMConfiguration","is_domain_connection":false,"show_as_button":false,"display_name":"Acceptance-Test-SCIM-TestAccDataSCIMConfiguration","realms":["Acceptance-Test-SCIM-Connection-TestAccDataSCIMConfiguration"],"enabled_clients":["JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_OS2XtCL9M7i8jant","options":{"mfa":{"active":true,"return_enroll_settings":true},"attributes":{"email":{"signup":{"status":"required","verification":{"active":true}},"identifier":{"active":true},"profile_required":true,"verification_method":"link"}},"import_mode":false,"configuration":{},"customScripts":{"login":"function login(email, password, callback) {\n  // This script should authenticate a user against the credentials stored in\n  // your database.\n  // It is executed when a user attempts to log in or immediately after signing\n  // up (as a verification that the user was successfully signed up).\n  //\n  // Everything returned by this script will be set as part of the user profile\n  // and will be visible by any of the tenant admins. Avoid adding attributes\n  // with values such as passwords, keys, secrets, etc.\n  //\n  // The `password` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database. For example:\n  //\n  //     var bcrypt = require(''bcrypt@0.8.5'');\n  //     bcrypt.compare(password, dbPasswordHash, function(err, res)) { ... }\n  //\n  // There are three ways this script can finish:\n  // 1. The user''s credentials are valid. The returned user profile should be in\n  // the following format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema\n  //     var profile = {\n  //       user_id: ..., // user_id is mandatory\n  //       email: ...,\n  //       [...]\n  //     };\n  //     callback(null, profile);\n  // 2. The user''s credentials are invalid\n  //     callback(new WrongUsernameOrPasswordError(email, \"my error message\"));\n  //\n  //    Note: Passing no arguments or a falsey first argument to\n  //    `WrongUsernameOrPasswordError` will result in the error being logged as\n  //    an `fu` event (invalid username/email) with an empty string for a user_id.\n  //    Providing a truthy first argument will result in the error being logged\n  //    as an `fp` event (the user exists, but the password is invalid) with a\n  //    user_id value of \"auth0|<first argument>\". See the `Log Event Type Codes`\n  //    documentation for more information about these event types:\n  //    https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n  //\n  // A list of Node.js modules which can be referenced is available here:\n  //\n  //    https://tehsis.github.io/webtaskio-canirequire/\n\n  const msg = ''Please implement the Login script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","create":"function create(user, callback) {\n  // This script should create a user entry in your existing database. It will\n  // be executed when a user attempts to sign up, or when a user is created\n  // through the Auth0 dashboard or API.\n  // When this script has finished executing, the Login script will be\n  // executed immediately afterwards, to verify that the user was created\n  // successfully.\n  //\n  // The user object will always contain the following properties:\n  // * email: the user''s email\n  // * password: the password entered by the user, in plain text\n  // * tenant: the name of this Auth0 account\n  // * client_id: the client ID of the application where the user signed up, or\n  //              API key if created through the API or Auth0 dashboard\n  // * connection: the name of this database connection\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully created\n  //     callback(null);\n  // 2. This user already exists in your database\n  //     callback(new ValidationError(\"user_exists\", \"my error message\"));\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Create script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","delete":"function remove(id, callback) {\n  // This script remove a user from your existing database.\n  // It is executed whenever a user is deleted from the API or Auth0 dashboard.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user was removed successfully:\n  //     callback(null);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Delete script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","verify":"function verify(email, callback) {\n  // This script should mark the current user''s email address as verified in\n  // your database.\n  // It is executed whenever a user clicks the verification link sent by email.\n  // These emails can be customized at https://manage.auth0.com/#/emails.\n  // It is safe to assume that the user''s email already exists in your database,\n  // because verification emails, if enabled, are sent immediately after a\n  // successful signup.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user''s email was verified successfully\n  //     callback(null, true);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the verification link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Verify script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","get_user":"function getByEmail(email, callback) {\n  // This script should retrieve a user profile from your existing database,\n  // without authenticating the user.\n  // It is used to check if a user exists before executing flows that do not\n  // require authentication (signup and password reset).\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully found. The profile should be in the following\n  // format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema.\n  //     callback(null, profile);\n  // 2. A user was not found\n  //     callback(null);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Get User script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","change_password":"function changePassword(email, newPassword, callback) {\n  // This script should change the password stored for the current user in your\n  // database. It is executed when the user clicks on the confirmation link\n  // after a reset password request.\n  // The content and behavior of password confirmation emails can be customized\n  // here: https://manage.auth0.com/#/emails\n  // The `newPassword` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database.\n  //\n  // There are three ways that this script can finish:\n  // 1. The user''s password was updated successfully:\n  //     callback(null, true);\n  // 2. The user''s password was not updated:\n  //     callback(null, false);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the confirmation link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Change Password script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n"},"disable_signup":false,"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"password_history":{"size":5,"enable":false},"strategy_version":2,"password_dictionary":{"enable":false,"dictionary":[]},"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true,"password_no_personal_info":{"enable":false},"password_complexity_options":{"min_length":8},"enabledDatabaseCustomization":false},"strategy":"auth0","name":"conn","is_domain_connection":false,"realms":["conn"],"enabled_clients":["CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","Cizq7JxgSY4pisDFSpZNCOZVch0iGTOS","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_CTQfZ88bvrXr6FR8","options":{"mfa":{"active":true,"return_enroll_settings":true},"attributes":{"email":{"signup":{"status":"required","verification":{"active":true}},"identifier":{"active":true},"profile_required":true,"verification_method":"otp"}},"import_mode":false,"configuration":{},"customScripts":{"login":"function login(email, password, callback) {\n  // This script should authenticate a user against the credentials stored in\n  // your database.\n  // It is executed when a user attempts to log in or immediately after signing\n  // up (as a verification that the user was successfully signed up).\n  //\n  // Everything returned by this script will be set as part of the user profile\n  // and will be visible by any of the tenant admins. Avoid adding attributes\n  // with values such as passwords, keys, secrets, etc.\n  //\n  // The `password` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database. For example:\n  //\n  //     var bcrypt = require(''bcrypt@0.8.5'');\n  //     bcrypt.compare(password, dbPasswordHash, function(err, res)) { ... }\n  //\n  // There are three ways this script can finish:\n  // 1. The user''s credentials are valid. The returned user profile should be in\n  // the following format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema\n  //     var profile = {\n  //       user_id: ..., // user_id is mandatory\n  //       email: ...,\n  //       [...]\n  //     };\n  //     callback(null, profile);\n  // 2. The user''s credentials are invalid\n  //     callback(new WrongUsernameOrPasswordError(email, \"my error message\"));\n  //\n  //    Note: Passing no arguments or a falsey first argument to\n  //    `WrongUsernameOrPasswordError` will result in the error being logged as\n  //    an `fu` event (invalid username/email) with an empty string for a user_id.\n  //    Providing a truthy first argument will result in the error being logged\n  //    as an `fp` event (the user exists, but the password is invalid) with a\n  //    user_id value of \"auth0|<first argument>\". See the `Log Event Type Codes`\n  //    documentation for more information about these event types:\n  //    https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n  //\n  // A list of Node.js modules which can be referenced is available here:\n  //\n  //    https://tehsis.github.io/webtaskio-canirequire/\n\n  const msg = ''Please implement the Login script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","create":"function create(user, callback) {\n  // This script should create a user entry in your existing database. It will\n  // be executed when a user attempts to sign up, or when a user is created\n  // through the Auth0 dashboard or API.\n  // When this script has finished executing, the Login script will be\n  // executed immediately afterwards, to verify that the user was created\n  // successfully.\n  //\n  // The user object will always contain the following properties:\n  // * email: the user''s email\n  // * password: the password entered by the user, in plain text\n  // * tenant: the name of this Auth0 account\n  // * client_id: the client ID of the application where the user signed up, or\n  //              API key if created through the API or Auth0 dashboard\n  // * connection: the name of this database connection\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully created\n  //     callback(null);\n  // 2. This user already exists in your database\n  //     callback(new ValidationError(\"user_exists\", \"my error message\"));\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Create script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","delete":"function remove(id, callback) {\n  // This script remove a user from your existing database.\n  // It is executed whenever a user is deleted from the API or Auth0 dashboard.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user was removed successfully:\n  //     callback(null);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Delete script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","verify":"function verify(email, callback) {\n  // This script should mark the current user''s email address as verified in\n  // your database.\n  // It is executed whenever a user clicks the verification link sent by email.\n  // These emails can be customized at https://manage.auth0.com/#/emails.\n  // It is safe to assume that the user''s email already exists in your database,\n  // because verification emails, if enabled, are sent immediately after a\n  // successful signup.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user''s email was verified successfully\n  //     callback(null, true);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the verification link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Verify script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","get_user":"function getByEmail(email, callback) {\n  // This script should retrieve a user profile from your existing database,\n  // without authenticating the user.\n  // It is used to check if a user exists before executing flows that do not\n  // require authentication (signup and password reset).\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully found. The profile should be in the following\n  // format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema.\n  //     callback(null, profile);\n  // 2. A user was not found\n  //     callback(null);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Get User script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","change_password":"function changePassword(email, newPassword, callback) {\n  // This script should change the password stored for the current user in your\n  // database. It is executed when the user clicks on the confirmation link\n  // after a reset password request.\n  // The content and behavior of password confirmation emails can be customized\n  // here: https://manage.auth0.com/#/emails\n  // The `newPassword` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database.\n  //\n  // There are three ways that this script can finish:\n  // 1. The user''s password was updated successfully:\n  //     callback(null, true);\n  // 2. The user''s password was not updated:\n  //     callback(null, false);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the confirmation link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Change Password script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n"},"disable_signup":false,"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"password_history":{"size":5,"enable":false},"strategy_version":2,"requires_username":false,"password_dictionary":{"enable":false,"dictionary":[]},"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true,"password_no_personal_info":{"enable":false},"password_complexity_options":{"min_length":8},"enabledDatabaseCustomization":false},"strategy":"auth0","name":"Connectionnnn","is_domain_connection":false,"realms":["Connectionnnn"],"enabled_clients":["LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_TlQiRHH7mG8zxl6b","options":{"passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"password_history":{"size":5,"enable":true},"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"conn-test","is_domain_connection":false,"realms":["conn-test"],"enabled_clients":["LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_jAyV4JvO7mvw4U0G","options":{"name":"email","totp":{"length":6,"time_step":180},"email":{"body":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <style type=\"text/css\">.ExternalClass,.ExternalClass div,.ExternalClass font,.ExternalClass p,.ExternalClass span,.ExternalClass td,img{line-height:100%}#outlook a{padding:0}.ExternalClass,.ReadMsgBody{width:100%}a,blockquote,body,li,p,table,td{-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}table,td{mso-table-lspace:0;mso-table-rspace:0}img{-ms-interpolation-mode:bicubic;border:0;height:auto;outline:0;text-decoration:none}table{border-collapse:collapse!important}#bodyCell,#bodyTable,body{height:100%!important;margin:0;padding:0;font-family:ProximaNova,sans-serif}#bodyCell{padding:20px}#bodyTable{width:600px}@font-face{font-family:ProximaNova;src:url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-regular-webfont-webfont.eot);src:url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-regular-webfont-webfont.eot?#iefix) format(''embedded-opentype''),url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-regular-webfont-webfont.woff) format(''woff'');font-weight:400;font-style:normal}@font-face{font-family:ProximaNova;src:url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-semibold-webfont-webfont.eot);src:url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-semibold-webfont-webfont.eot?#iefix) format(''embedded-opentype''),url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-semibold-webfont-webfont.woff) format(''woff'');font-weight:600;font-style:normal}@media only screen and (max-width:480px){#bodyTable,body{width:100%!important}a,blockquote,body,li,p,table,td{-webkit-text-size-adjust:none!important}body{min-width:100%!important}#bodyTable{max-width:600px!important}#signIn{max-width:280px!important}}\n</style>\n  </head>\n  <body leftmargin=\"0\" marginwidth=\"0\" topmargin=\"0\" marginheight=\"0\" offset=\"0\" style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;margin: 0;padding: 0;font-family: &quot;ProximaNova&quot;, sans-serif;height: 100% !important;\"><center>\n  <table style=\"width: 600px;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;mso-table-lspace: 0pt;mso-table-rspace: 0pt;margin: 0;padding: 0;font-family: &quot;ProximaNova&quot;, sans-serif;border-collapse: collapse !important;height: 100% !important;\" align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" height=\"100%\" width=\"100%\" id=\"bodyTable\">\n    <tr>\n      <td align=\"center\" valign=\"top\" id=\"bodyCell\" style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;mso-table-lspace: 0pt;mso-table-rspace: 0pt;margin: 0;padding: 20px;font-family: &quot;ProximaNova&quot;, sans-serif;height: 100% !important;\">\n      <div class=\"main\">\n        <p style=\"text-align: center;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%; margin-bottom: 30px;\">\n          <img src=\"https://cdn.auth0.com/styleguide/2.0.9/lib/logos/img/badge.png\" width=\"50\" alt=\"Your logo goes here\" style=\"-ms-interpolation-mode: bicubic;border: 0;height: auto;line-height: 100%;outline: none;text-decoration: none;\">\n        </p>\n\n        <!-- Email change content -->\n        {% if operation == ''change_email'' %}\n\n          <p style=\"font-size: 1.2em;line-height: 1.3;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">Your email address has been updated.</p>\n\n        {% else %}\n\n          <!-- Signup email content -->\n          {% if send == ''link'' or send == ''link_ios'' or send == ''link_android'' %}\n\n            <p style=\"font-size: 1.2em;line-height: 1.3;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">Click and confirm that you want to sign in to {{ application.name }}. This link will expire in three minutes.</p>\n\n            <div style=\"text-align:center\">\n            <a id=\"signIn\" style=\"text-transform: uppercase;letter-spacing: 1px;color: #ffffff;text-decoration: none;display: inline-block;min-height: 48px;line-height: 48px;padding-top: 0;padding-right: 26px;padding-bottom: 0;margin: 20px 0;padding-left: 26px;border: 0;outline: 0;background: #eb5424;font-size: 14px;font-style: normal;font-weight: 400;text-align: center;white-space: nowrap;border-radius: 3px;text-overflow: ellipsis;max-width: 280px;overflow: hidden;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\" href=\"{{ link }}\">Sign in to {{ application.name }}</a>\n            </div>\n\n            <p style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">Or sign in using this link:</p>\n            <p style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\"><a style=\"font-size: 12px; color: #A9B3BC; text-decoration: none;word-break: break-all;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\" href=\"{{ link }}\">{{ link }}</a></p>\n\n            {% elsif send == ''code'' %}\n\n            <p style=\"font-size: 1.4em; line-height: 1.3;\">Your verification code is: <b>{{ code }}</b></p>\n\n          {% endif %}\n\n        {% endif %}\n\n        <p style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">If you are having any issues with your account, please don''t hesitate to contact us by replying to this mail.</p>\n\n        <br>\n        Thanks!\n        <br>\n\n        <strong>{{ application.name }}</strong>\n\n        <br><br>\n        <hr style=\"border: 2px solid #EAEEF3; border-bottom: 0; margin: 20px 0;\">\n        <p style=\"text-align: center;color: #A9B3BC;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">\n          If you did not make this request, please contact us by replying to this mail.\n        </p>\n      </div>\n      </td>\n    </tr>\n  </table>\n</center>\n</body>\n</html>","from":"{{ application.name }} <test@auth0.com>","syntax":"liquid","subject":"Welcome to {{ application.name }}"},"disable_signup":false,"brute_force_protection":true},"strategy":"email","name":"email","is_domain_connection":false,"realms":["email"],"enabled_clients":["8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","7A3gY5j2rLPQHl4UzFUlAf9rpBCeCWVU","ltDtQeNbloAWqtmhW3HLmlF3Ogekdwna","C5qOU2xRAkFls7YYLH3oEoOiysvcs2t2","FLIRqmmdlFO8bgpSiI1edt3Z2ckK5Xnr","J1l9laXEKHJIIEjSvvMzvLq2GlZ9p9aB","kTELMnTEVedF64DRw0BkoXbHRopyKPIO","YjhE0LnX8K5EKtNyPBuokAYRWevhwOPk","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","Cizq7JxgSY4pisDFSpZNCOZVch0iGTOS","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_p4uGrcD1txAs77Mv","options":{"email":true,"scope":["email","profile"],"profile":true},"strategy":"google-oauth2","name":"google-oauth2","is_domain_connection":false,"realms":["google-oauth2"],"enabled_clients":["LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","ZpHnzZlq4UA2qJn2oZ9PRawSbkbnpJqa","FLIRqmmdlFO8bgpSiI1edt3Z2ckK5Xnr","y8zHiIOI5UciKi6yh6yPAQ3FpxvghHFb","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","7A3gY5j2rLPQHl4UzFUlAf9rpBCeCWVU","ltDtQeNbloAWqtmhW3HLmlF3Ogekdwna","2TXdYaVPUVJ3Ak3EQbui9wN5mL5I53Mh","8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","C5qOU2xRAkFls7YYLH3oEoOiysvcs2t2","J1l9laXEKHJIIEjSvvMzvLq2GlZ9p9aB","kTELMnTEVedF64DRw0BkoXbHRopyKPIO","kWhMhYgd8cF2qBpEnUBUN7Ksz5t9hjkQ","MT3xpNb0aT1Tey8brhRZJETmrelqC2Yv","YjhE0LnX8K5EKtNyPBuokAYRWevhwOPk","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","Cizq7JxgSY4pisDFSpZNCOZVch0iGTOS","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_XBtRghN11CY13wqL","options":{"cert":"-----BEGIN CERTIFICATE-----\nMIIFsjCCA5qgAwIBAgIURygVMMzdr+Q7rsUaz189JozyHMwwDQYJKoZIhvcNAQEL\nBQAwTjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMQwwCgYDVQQHDANTVkwxDTAL\nBgNVBAoMBGdSUEMxFTATBgNVBAMMDHRlc3QtY2xpZW50MTAeFw0yMTEyMjMxODQy\nNTJaFw0zMTEyMjExODQyNTJaME4xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTEM\nMAoGA1UEBwwDU1ZMMQ0wCwYDVQQKDARnUlBDMRUwEwYDVQQDDAx0ZXN0LWNsaWVu\ndDEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDJ4AqpGetyVSqGUuBJ\nLVFla+7bEfca7UYzfVSSZLZ/X+JDmWIVN8UIPuFib5jhMEc3XaUnFXUmM7zEtz/Z\nG5hapwLwOb2C3ZxOP6PQjYCJxbkLie+b43UQrFu1xxd3vMhVJgcj/AIxEpmszuqO\na6kUrkYifjJADQ+64kZgl66bsTdXMCzpxyFl9xUfff59L8OX+HUfAcoZz3emjg3Z\nJPYURQEmjdZTOau1EjFilwHgd989Jt7NKgx30NXoHmw7nusVBIY94fL2VKN3f1XV\nm0dHu5NI279Q6zr0ZBU7k5T3IeHnzsUesQS4NGlklDWoVTKk73Uv9Pna8yQsSW75\n7PEbHOGp9Knu4bnoGPOlsG81yIPipO6hTgGFK24pF97M9kpGbWqYX4+2vLlrCAfc\nmsHqaUPmQlYeRVTT6vw7ctYo2kyUYGtnODXk76LqewRBVvkzx75QUhfjAyb740Yc\nDmIenc56Tq6gebJHjhEmVSehR6xIpXP7SVeurTyhPsEQnpJHtgs4dcwWOZp7BvPN\nzHXmJqfr7vsshie3vS5kQ0u1e1yqAqXgyDjqKXOkx+dpgUTehSJHhPNHvTc5LXRs\nvvXKYz6FrwR/DZ8t7BNEvPeLjFgxpH7QVJFLCvCbXs5K6yYbsnLfxFIBPRnrbJkI\nsK+sQwnRdnsiUdPsTkG5B2lQfQIDAQABo4GHMIGEMB0GA1UdDgQWBBQ2lBp0PiRH\nHvQ5IRURm8aHsj4RETAfBgNVHSMEGDAWgBQ2lBp0PiRHHvQ5IRURm8aHsj4RETAP\nBgNVHRMBAf8EBTADAQH/MDEGA1UdEQQqMCiGJnNwaWZmZTovL2Zvby5iYXIuY29t\nL2NsaWVudC93b3JrbG9hZC8xMA0GCSqGSIb3DQEBCwUAA4ICAQA1mSkgRclAl+E/\naS9zJ7t8+Y4n3T24nOKKveSIjxXm/zjhWqVsLYBI6kglWtih2+PELvU8JdPqNZK3\n4Kl0Q6FWpVSGDdWN1i6NyORt2ocggL3ke3iXxRk3UpUKJmqwz81VhA2KUHnMlyE0\nIufFfZNwNWWHBv13uJfRbjeQpKPhU+yf4DeXrsWcvrZlGvAET+mcplafUzCp7Iv+\nPcISJtUerbxbVtuHVeZCLlgDXWkLAWJN8rf0dIG4x060LJ+j6j9uRVhb9sZn1HJV\n+j4XdIYm1VKilluhOtNwP2d3Ox/JuTBxf7hFHXZPfMagQE5k5PzmxRaCAEMJ1l2D\nvUbZw+shJfSNoWcBo2qadnUaWT3BmmJRBDh7ZReib/RQ1Rd4ygOyzP3E0vkV4/gq\nyjLdApXh5PZP8KLQZ+1JN/sdWt7VfIt9wYOpkIqujdll51ESHzwQeAK9WVCB4UvV\nz6zdhItB9CRbXPreWC+wCB1xDovIzFKOVsLs5+Gqs1m7VinG2LxbDqaKyo/FB0Hx\nx0acBNzezLWoDwXYQrN0T0S4pnqhKD1CYPpdArBkNezUYAjS725FkApuK+mnBX3U\n0msBffEaUEOkcyar1EW2m/33vpetD/k3eQQkmvQf4Hbiu9AF+9cNDm/hMuXEw5EX\nGA91fn0891b5eEW8BJHXX0jri0aN8g==\n-----END CERTIFICATE-----\n","expires":"2031-12-21T18:42:52.000Z","subject":{"commonName":"test-client1","countryName":"US","localityName":"SVL","organizationName":"gRPC","stateOrProvinceName":"CA"},"fieldsMap":{},"signingCert":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZzakNDQTVxZ0F3SUJBZ0lVUnlnVk1NemRyK1E3cnNVYXoxODlKb3p5SE13d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1RqRUxNQWtHQTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdNQWtOQk1Rd3dDZ1lEVlFRSERBTlRWa3d4RFRBTApCZ05WQkFvTUJHZFNVRU14RlRBVEJnTlZCQU1NREhSbGMzUXRZMnhwWlc1ME1UQWVGdzB5TVRFeU1qTXhPRFF5Ck5USmFGdzB6TVRFeU1qRXhPRFF5TlRKYU1FNHhDekFKQmdOVkJBWVRBbFZUTVFzd0NRWURWUVFJREFKRFFURU0KTUFvR0ExVUVCd3dEVTFaTU1RMHdDd1lEVlFRS0RBUm5VbEJETVJVd0V3WURWUVFEREF4MFpYTjBMV05zYVdWdQpkREV3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRREo0QXFwR2V0eVZTcUdVdUJKCkxWRmxhKzdiRWZjYTdVWXpmVlNTWkxaL1grSkRtV0lWTjhVSVB1RmliNWpoTUVjM1hhVW5GWFVtTTd6RXR6L1oKRzVoYXB3THdPYjJDM1p4T1A2UFFqWUNKeGJrTGllK2I0M1VRckZ1MXh4ZDN2TWhWSmdjai9BSXhFcG1zenVxTwphNmtVcmtZaWZqSkFEUSs2NGtaZ2w2NmJzVGRYTUN6cHh5Rmw5eFVmZmY1OUw4T1grSFVmQWNvWnozZW1qZzNaCkpQWVVSUUVtamRaVE9hdTFFakZpbHdIZ2Q5ODlKdDdOS2d4MzBOWG9IbXc3bnVzVkJJWTk0ZkwyVktOM2YxWFYKbTBkSHU1TkkyNzlRNnpyMFpCVTdrNVQzSWVIbnpzVWVzUVM0Tkdsa2xEV29WVEtrNzNVdjlQbmE4eVFzU1c3NQo3UEViSE9HcDlLbnU0Ym5vR1BPbHNHODF5SVBpcE82aFRnR0ZLMjRwRjk3TTlrcEdiV3FZWDQrMnZMbHJDQWZjCm1zSHFhVVBtUWxZZVJWVFQ2dnc3Y3RZbzJreVVZR3RuT0RYazc2THFld1JCVnZreng3NVFVaGZqQXliNzQwWWMKRG1JZW5jNTZUcTZnZWJKSGpoRW1WU2VoUjZ4SXBYUDdTVmV1clR5aFBzRVFucEpIdGdzNGRjd1dPWnA3QnZQTgp6SFhtSnFmcjd2c3NoaWUzdlM1a1EwdTFlMXlxQXFYZ3lEanFLWE9reCtkcGdVVGVoU0pIaFBOSHZUYzVMWFJzCnZ2WEtZejZGcndSL0RaOHQ3Qk5FdlBlTGpGZ3hwSDdRVkpGTEN2Q2JYczVLNnlZYnNuTGZ4RklCUFJucmJKa0kKc0src1F3blJkbnNpVWRQc1RrRzVCMmxRZlFJREFRQUJvNEdITUlHRU1CMEdBMVVkRGdRV0JCUTJsQnAwUGlSSApIdlE1SVJVUm04YUhzajRSRVRBZkJnTlZIU01FR0RBV2dCUTJsQnAwUGlSSEh2UTVJUlVSbThhSHNqNFJFVEFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTURFR0ExVWRFUVFxTUNpR0puTndhV1ptWlRvdkwyWnZieTVpWVhJdVkyOXQKTDJOc2FXVnVkQzkzYjNKcmJHOWhaQzh4TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFBMW1Ta2dSY2xBbCtFLwphUzl6Sjd0OCtZNG4zVDI0bk9LS3ZlU0lqeFhtL3pqaFdxVnNMWUJJNmtnbFd0aWgyK1BFTHZVOEpkUHFOWkszCjRLbDBRNkZXcFZTR0RkV04xaTZOeU9SdDJvY2dnTDNrZTNpWHhSazNVcFVLSm1xd3o4MVZoQTJLVUhuTWx5RTAKSXVmRmZaTndOV1dIQnYxM3VKZlJiamVRcEtQaFUreWY0RGVYcnNXY3ZyWmxHdkFFVCttY3BsYWZVekNwN0l2KwpQY0lTSnRVZXJieGJWdHVIVmVaQ0xsZ0RYV2tMQVdKTjhyZjBkSUc0eDA2MExKK2o2ajl1UlZoYjlzWm4xSEpWCitqNFhkSVltMVZLaWxsdWhPdE53UDJkM094L0p1VEJ4ZjdoRkhYWlBmTWFnUUU1azVQem14UmFDQUVNSjFsMkQKdlViWncrc2hKZlNOb1djQm8ycWFkblVhV1QzQm1tSlJCRGg3WlJlaWIvUlExUmQ0eWdPeXpQM0UwdmtWNC9ncQp5akxkQXBYaDVQWlA4S0xRWisxSk4vc2RXdDdWZkl0OXdZT3BrSXF1amRsbDUxRVNIendRZUFLOVdWQ0I0VXZWCno2emRoSXRCOUNSYlhQcmVXQyt3Q0IxeERvdkl6RktPVnNMczUrR3FzMW03VmluRzJMeGJEcWFLeW8vRkIwSHgKeDBhY0JOemV6TFdvRHdYWVFyTjBUMFM0cG5xaEtEMUNZUHBkQXJCa05lelVZQWpTNzI1RmtBcHVLK21uQlgzVQowbXNCZmZFYVVFT2tjeWFyMUVXMm0vMzN2cGV0RC9rM2VRUWttdlFmNEhiaXU5QUYrOWNORG0vaE11WEV3NUVYCkdBOTFmbjA4OTFiNWVFVzhCSkhYWDBqcmkwYU44Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K","thumbprints":["a50f15b92a9da85db847562a9876fdcb71f3f09b"],"idpinitiated":{"enabled":true},"disableSignout":true,"signInEndpoint":"https://example.com","digestAlgorithm":"","signOutEndpoint":"","signSAMLRequest":true,"user_id_attribute":"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier","signatureAlgorithm":""},"strategy":"samlp","name":"samlp","provisioning_ticket_url":"https://terraform-provider-auth0-dev.us.auth0.com/p/samlp/2jZreSKN","is_domain_connection":false,"show_as_button":false,"realms":["samlp"],"enabled_clients":["JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_WdzxNQ8IrXra406n","options":{"from":"+15673812244","name":"sms","totp":{"length":6,"time_step":180},"syntax":"md_with_macros","template":"Your verification code is: @@password@@","twilio_sid":"ACc95b2e7e2426f6c6d795680e98c55ab5","twilio_token":"a79f8df7703809bd15cff7f5aab1ebf9","disable_signup":false,"messaging_service_sid":null,"brute_force_protection":true},"strategy":"sms","name":"sms","is_domain_connection":false,"realms":["sms"],"enabled_clients":["YjhE0LnX8K5EKtNyPBuokAYRWevhwOPk","LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_ydYMO17mFY5OiT4u","options":{"mfa":{"active":true,"return_enroll_settings":true},"attributes":{"email":{"signup":{"status":"required","verification":{"active":true}},"identifier":{"active":true},"profile_required":true,"verification_method":"otp"}},"import_mode":false,"configuration":{},"customScripts":{"login":"function login(email, password, callback) {\n  // This script should authenticate a user against the credentials stored in\n  // your database.\n  // It is executed when a user attempts to log in or immediately after signing\n  // up (as a verification that the user was successfully signed up).\n  //\n  // Everything returned by this script will be set as part of the user profile\n  // and will be visible by any of the tenant admins. Avoid adding attributes\n  // with values such as passwords, keys, secrets, etc.\n  //\n  // The `password` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database. For example:\n  //\n  //     var bcrypt = require(''bcrypt@0.8.5'');\n  //     bcrypt.compare(password, dbPasswordHash, function(err, res)) { ... }\n  //\n  // There are three ways this script can finish:\n  // 1. The user''s credentials are valid. The returned user profile should be in\n  // the following format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema\n  //     var profile = {\n  //       user_id: ..., // user_id is mandatory\n  //       email: ...,\n  //       [...]\n  //     };\n  //     callback(null, profile);\n  // 2. The user''s credentials are invalid\n  //     callback(new WrongUsernameOrPasswordError(email, \"my error message\"));\n  //\n  //    Note: Passing no arguments or a falsey first argument to\n  //    `WrongUsernameOrPasswordError` will result in the error being logged as\n  //    an `fu` event (invalid username/email) with an empty string for a user_id.\n  //    Providing a truthy first argument will result in the error being logged\n  //    as an `fp` event (the user exists, but the password is invalid) with a\n  //    user_id value of \"auth0|<first argument>\". See the `Log Event Type Codes`\n  //    documentation for more information about these event types:\n  //    https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n  //\n  // A list of Node.js modules which can be referenced is available here:\n  //\n  //    https://tehsis.github.io/webtaskio-canirequire/\n\n  const msg = ''Please implement the Login script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","create":"function create(user, callback) {\n  // This script should create a user entry in your existing database. It will\n  // be executed when a user attempts to sign up, or when a user is created\n  // through the Auth0 dashboard or API.\n  // When this script has finished executing, the Login script will be\n  // executed immediately afterwards, to verify that the user was created\n  // successfully.\n  //\n  // The user object will always contain the following properties:\n  // * email: the user''s email\n  // * password: the password entered by the user, in plain text\n  // * tenant: the name of this Auth0 account\n  // * client_id: the client ID of the application where the user signed up, or\n  //              API key if created through the API or Auth0 dashboard\n  // * connection: the name of this database connection\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully created\n  //     callback(null);\n  // 2. This user already exists in your database\n  //     callback(new ValidationError(\"user_exists\", \"my error message\"));\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Create script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","delete":"function remove(id, callback) {\n  // This script remove a user from your existing database.\n  // It is executed whenever a user is deleted from the API or Auth0 dashboard.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user was removed successfully:\n  //     callback(null);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Delete script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","verify":"function verify(email, callback) {\n  // This script should mark the current user''s email address as verified in\n  // your database.\n  // It is executed whenever a user clicks the verification link sent by email.\n  // These emails can be customized at https://manage.auth0.com/#/emails.\n  // It is safe to assume that the user''s email already exists in your database,\n  // because verification emails, if enabled, are sent immediately after a\n  // successful signup.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user''s email was verified successfully\n  //     callback(null, true);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the verification link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Verify script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","get_user":"function getByEmail(email, callback) {\n  // This script should retrieve a user profile from your existing database,\n  // without authenticating the user.\n  // It is used to check if a user exists before executing flows that do not\n  // require authentication (signup and password reset).\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully found. The profile should be in the following\n  // format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema.\n  //     callback(null, profile);\n  // 2. A user was not found\n  //     callback(null);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Get User script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","change_password":"function changePassword(email, newPassword, callback) {\n  // This script should change the password stored for the current user in your\n  // database. It is executed when the user clicks on the confirmation link\n  // after a reset password request.\n  // The content and behavior of password confirmation emails can be customized\n  // here: https://manage.auth0.com/#/emails\n  // The `newPassword` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database.\n  //\n  // There are three ways that this script can finish:\n  // 1. The user''s password was updated successfully:\n  //     callback(null, true);\n  // 2. The user''s password was not updated:\n  //     callback(null, false);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the confirmation link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Change Password script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n"},"disable_signup":false,"passwordPolicy":"fair","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"password_history":{"size":5,"enable":false},"strategy_version":2,"password_dictionary":{"enable":false,"dictionary":[]},"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true,"password_no_personal_info":{"enable":false},"password_complexity_options":{"min_length":8},"enabledDatabaseCustomization":false},"strategy":"auth0","name":"test-db-conn","is_domain_connection":false,"realms":["test-db-conn"],"enabled_clients":["LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_83xIjpryKTaudn3K","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Username-Password-Authentication","is_domain_connection":false,"realms":["Username-Password-Authentication"],"enabled_clients":["J1l9laXEKHJIIEjSvvMzvLq2GlZ9p9aB","LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","ZpHnzZlq4UA2qJn2oZ9PRawSbkbnpJqa","FLIRqmmdlFO8bgpSiI1edt3Z2ckK5Xnr","MT3xpNb0aT1Tey8brhRZJETmrelqC2Yv","y8zHiIOI5UciKi6yh6yPAQ3FpxvghHFb","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","7A3gY5j2rLPQHl4UzFUlAf9rpBCeCWVU","ltDtQeNbloAWqtmhW3HLmlF3Ogekdwna","2TXdYaVPUVJ3Ak3EQbui9wN5mL5I53Mh","8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","C5qOU2xRAkFls7YYLH3oEoOiysvcs2t2","kTELMnTEVedF64DRw0BkoXbHRopyKPIO","kWhMhYgd8cF2qBpEnUBUN7Ksz5t9hjkQ","YjhE0LnX8K5EKtNyPBuokAYRWevhwOPk","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","Cizq7JxgSY4pisDFSpZNCOZVch0iGTOS","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]}]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 470.182791ms
    - id: 9
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections?include_totals=true&per_page=50&take=100
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"connections":[{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"],"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"]},{"id":"con_1UIbZoO6NXBz5Byh","options":{"type":"back_channel","issuer":"https://example.okta.com","jwks_uri":"https://example.okta.com/oauth2/v1/keys","client_id":"1234567","attribute_map":{"mapping_mode":"basic_profile"},"client_secret":"1234567","schema_version":"oidc-V4","token_endpoint":"https://example.okta.com/oauth2/v1/token","userinfo_endpoint":null,"connection_settings":{"pkce":"auto"},"authorization_endpoint":"https://example.okta.com/oauth2/v1/authorize"},"strategy":"okta","name":"Acceptance-Test-Enterprise-Connection-testaccorganizationconnection","is_domain_connection":false,"show_as_button":false,"display_name":"testaccorganizationconnection","realms":["Acceptance-Test-Enterprise-Connection-testaccorganizationconnection"],"enabled_clients":["JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_qGfQLHT8pZxc1Pak","options":{"type":"back_channel","issuer":"https://example.okta.com","jwks_uri":"https://example.okta.com/oauth2/v1/keys","client_id":"1234567","attribute_map":{"mapping_mode":"basic_profile"},"client_secret":"1234567","schema_version":"oidc-V4","token_endpoint":"https://example.okta.com/oauth2/v1/token","userinfo_endpoint":null,"connection_settings":{"pkce":"auto"},"authorization_endpoint":"https://example.okta.com/oauth2/v1/authorize"},"strategy":"okta","name":"Acceptance-Test-SCIM-Connection-TestAccDataSCIMConfiguration","is_domain_connection":false,"show_as_button":false,"display_name":"Acceptance-Test-SCIM-TestAccDataSCIMConfiguration","realms":["Acceptance-Test-SCIM-Connection-TestAccDataSCIMConfiguration"],"enabled_clients":["JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_OS2XtCL9M7i8jant","options":{"mfa":{"active":true,"return_enroll_settings":true},"attributes":{"email":{"signup":{"status":"required","verification":{"active":true}},"identifier":{"active":true},"profile_required":true,"verification_method":"link"}},"import_mode":false,"configuration":{},"customScripts":{"login":"function login(email, password, callback) {\n  // This script should authenticate a user against the credentials stored in\n  // your database.\n  // It is executed when a user attempts to log in or immediately after signing\n  // up (as a verification that the user was successfully signed up).\n  //\n  // Everything returned by this script will be set as part of the user profile\n  // and will be visible by any of the tenant admins. Avoid adding attributes\n  // with values such as passwords, keys, secrets, etc.\n  //\n  // The `password` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database. For example:\n  //\n  //     var bcrypt = require(''bcrypt@0.8.5'');\n  //     bcrypt.compare(password, dbPasswordHash, function(err, res)) { ... }\n  //\n  // There are three ways this script can finish:\n  // 1. The user''s credentials are valid. The returned user profile should be in\n  // the following format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema\n  //     var profile = {\n  //       user_id: ..., // user_id is mandatory\n  //       email: ...,\n  //       [...]\n  //     };\n  //     callback(null, profile);\n  // 2. The user''s credentials are invalid\n  //     callback(new WrongUsernameOrPasswordError(email, \"my error message\"));\n  //\n  //    Note: Passing no arguments or a falsey first argument to\n  //    `WrongUsernameOrPasswordError` will result in the error being logged as\n  //    an `fu` event (invalid username/email) with an empty string for a user_id.\n  //    Providing a truthy first argument will result in the error being logged\n  //    as an `fp` event (the user exists, but the password is invalid) with a\n  //    user_id value of \"auth0|<first argument>\". See the `Log Event Type Codes`\n  //    documentation for more information about these event types:\n  //    https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n  //\n  // A list of Node.js modules which can be referenced is available here:\n  //\n  //    https://tehsis.github.io/webtaskio-canirequire/\n\n  const msg = ''Please implement the Login script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","create":"function create(user, callback) {\n  // This script should create a user entry in your existing database. It will\n  // be executed when a user attempts to sign up, or when a user is created\n  // through the Auth0 dashboard or API.\n  // When this script has finished executing, the Login script will be\n  // executed immediately afterwards, to verify that the user was created\n  // successfully.\n  //\n  // The user object will always contain the following properties:\n  // * email: the user''s email\n  // * password: the password entered by the user, in plain text\n  // * tenant: the name of this Auth0 account\n  // * client_id: the client ID of the application where the user signed up, or\n  //              API key if created through the API or Auth0 dashboard\n  // * connection: the name of this database connection\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully created\n  //     callback(null);\n  // 2. This user already exists in your database\n  //     callback(new ValidationError(\"user_exists\", \"my error message\"));\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Create script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","delete":"function remove(id, callback) {\n  // This script remove a user from your existing database.\n  // It is executed whenever a user is deleted from the API or Auth0 dashboard.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user was removed successfully:\n  //     callback(null);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Delete script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","verify":"function verify(email, callback) {\n  // This script should mark the current user''s email address as verified in\n  // your database.\n  // It is executed whenever a user clicks the verification link sent by email.\n  // These emails can be customized at https://manage.auth0.com/#/emails.\n  // It is safe to assume that the user''s email already exists in your database,\n  // because verification emails, if enabled, are sent immediately after a\n  // successful signup.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user''s email was verified successfully\n  //     callback(null, true);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the verification link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Verify script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","get_user":"function getByEmail(email, callback) {\n  // This script should retrieve a user profile from your existing database,\n  // without authenticating the user.\n  // It is used to check if a user exists before executing flows that do not\n  // require authentication (signup and password reset).\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully found. The profile should be in the following\n  // format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema.\n  //     callback(null, profile);\n  // 2. A user was not found\n  //     callback(null);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Get User script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","change_password":"function changePassword(email, newPassword, callback) {\n  // This script should change the password stored for the current user in your\n  // database. It is executed when the user clicks on the confirmation link\n  // after a reset password request.\n  // The content and behavior of password confirmation emails can be customized\n  // here: https://manage.auth0.com/#/emails\n  // The `newPassword` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database.\n  //\n  // There are three ways that this script can finish:\n  // 1. The user''s password was updated successfully:\n  //     callback(null, true);\n  // 2. The user''s password was not updated:\n  //     callback(null, false);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the confirmation link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Change Password script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n"},"disable_signup":false,"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"password_history":{"size":5,"enable":false},"strategy_version":2,"password_dictionary":{"enable":false,"dictionary":[]},"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true,"password_no_personal_info":{"enable":false},"password_complexity_options":{"min_length":8},"enabledDatabaseCustomization":false},"strategy":"auth0","name":"conn","is_domain_connection":false,"realms":["conn"],"enabled_clients":["CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","Cizq7JxgSY4pisDFSpZNCOZVch0iGTOS","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_CTQfZ88bvrXr6FR8","options":{"mfa":{"active":true,"return_enroll_settings":true},"attributes":{"email":{"signup":{"status":"required","verification":{"active":true}},"identifier":{"active":true},"profile_required":true,"verification_method":"otp"}},"import_mode":false,"configuration":{},"customScripts":{"login":"function login(email, password, callback) {\n  // This script should authenticate a user against the credentials stored in\n  // your database.\n  // It is executed when a user attempts to log in or immediately after signing\n  // up (as a verification that the user was successfully signed up).\n  //\n  // Everything returned by this script will be set as part of the user profile\n  // and will be visible by any of the tenant admins. Avoid adding attributes\n  // with values such as passwords, keys, secrets, etc.\n  //\n  // The `password` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database. For example:\n  //\n  //     var bcrypt = require(''bcrypt@0.8.5'');\n  //     bcrypt.compare(password, dbPasswordHash, function(err, res)) { ... }\n  //\n  // There are three ways this script can finish:\n  // 1. The user''s credentials are valid. The returned user profile should be in\n  // the following format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema\n  //     var profile = {\n  //       user_id: ..., // user_id is mandatory\n  //       email: ...,\n  //       [...]\n  //     };\n  //     callback(null, profile);\n  // 2. The user''s credentials are invalid\n  //     callback(new WrongUsernameOrPasswordError(email, \"my error message\"));\n  //\n  //    Note: Passing no arguments or a falsey first argument to\n  //    `WrongUsernameOrPasswordError` will result in the error being logged as\n  //    an `fu` event (invalid username/email) with an empty string for a user_id.\n  //    Providing a truthy first argument will result in the error being logged\n  //    as an `fp` event (the user exists, but the password is invalid) with a\n  //    user_id value of \"auth0|<first argument>\". See the `Log Event Type Codes`\n  //    documentation for more information about these event types:\n  //    https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n  //\n  // A list of Node.js modules which can be referenced is available here:\n  //\n  //    https://tehsis.github.io/webtaskio-canirequire/\n\n  const msg = ''Please implement the Login script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","create":"function create(user, callback) {\n  // This script should create a user entry in your existing database. It will\n  // be executed when a user attempts to sign up, or when a user is created\n  // through the Auth0 dashboard or API.\n  // When this script has finished executing, the Login script will be\n  // executed immediately afterwards, to verify that the user was created\n  // successfully.\n  //\n  // The user object will always contain the following properties:\n  // * email: the user''s email\n  // * password: the password entered by the user, in plain text\n  // * tenant: the name of this Auth0 account\n  // * client_id: the client ID of the application where the user signed up, or\n  //              API key if created through the API or Auth0 dashboard\n  // * connection: the name of this database connection\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully created\n  //     callback(null);\n  // 2. This user already exists in your database\n  //     callback(new ValidationError(\"user_exists\", \"my error message\"));\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Create script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","delete":"function remove(id, callback) {\n  // This script remove a user from your existing database.\n  // It is executed whenever a user is deleted from the API or Auth0 dashboard.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user was removed successfully:\n  //     callback(null);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Delete script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","verify":"function verify(email, callback) {\n  // This script should mark the current user''s email address as verified in\n  // your database.\n  // It is executed whenever a user clicks the verification link sent by email.\n  // These emails can be customized at https://manage.auth0.com/#/emails.\n  // It is safe to assume that the user''s email already exists in your database,\n  // because verification emails, if enabled, are sent immediately after a\n  // successful signup.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user''s email was verified successfully\n  //     callback(null, true);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the verification link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Verify script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","get_user":"function getByEmail(email, callback) {\n  // This script should retrieve a user profile from your existing database,\n  // without authenticating the user.\n  // It is used to check if a user exists before executing flows that do not\n  // require authentication (signup and password reset).\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully found. The profile should be in the following\n  // format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema.\n  //     callback(null, profile);\n  // 2. A user was not found\n  //     callback(null);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Get User script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","change_password":"function changePassword(email, newPassword, callback) {\n  // This script should change the password stored for the current user in your\n  // database. It is executed when the user clicks on the confirmation link\n  // after a reset password request.\n  // The content and behavior of password confirmation emails can be customized\n  // here: https://manage.auth0.com/#/emails\n  // The `newPassword` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database.\n  //\n  // There are three ways that this script can finish:\n  // 1. The user''s password was updated successfully:\n  //     callback(null, true);\n  // 2. The user''s password was not updated:\n  //     callback(null, false);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the confirmation link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Change Password script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n"},"disable_signup":false,"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"password_history":{"size":5,"enable":false},"strategy_version":2,"requires_username":false,"password_dictionary":{"enable":false,"dictionary":[]},"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true,"password_no_personal_info":{"enable":false},"password_complexity_options":{"min_length":8},"enabledDatabaseCustomization":false},"strategy":"auth0","name":"Connectionnnn","is_domain_connection":false,"realms":["Connectionnnn"],"enabled_clients":["LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_TlQiRHH7mG8zxl6b","options":{"passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"password_history":{"size":5,"enable":true},"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"conn-test","is_domain_connection":false,"realms":["conn-test"],"enabled_clients":["LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_jAyV4JvO7mvw4U0G","options":{"name":"email","totp":{"length":6,"time_step":180},"email":{"body":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <style type=\"text/css\">.ExternalClass,.ExternalClass div,.ExternalClass font,.ExternalClass p,.ExternalClass span,.ExternalClass td,img{line-height:100%}#outlook a{padding:0}.ExternalClass,.ReadMsgBody{width:100%}a,blockquote,body,li,p,table,td{-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}table,td{mso-table-lspace:0;mso-table-rspace:0}img{-ms-interpolation-mode:bicubic;border:0;height:auto;outline:0;text-decoration:none}table{border-collapse:collapse!important}#bodyCell,#bodyTable,body{height:100%!important;margin:0;padding:0;font-family:ProximaNova,sans-serif}#bodyCell{padding:20px}#bodyTable{width:600px}@font-face{font-family:ProximaNova;src:url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-regular-webfont-webfont.eot);src:url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-regular-webfont-webfont.eot?#iefix) format(''embedded-opentype''),url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-regular-webfont-webfont.woff) format(''woff'');font-weight:400;font-style:normal}@font-face{font-family:ProximaNova;src:url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-semibold-webfont-webfont.eot);src:url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-semibold-webfont-webfont.eot?#iefix) format(''embedded-opentype''),url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-semibold-webfont-webfont.woff) format(''woff'');font-weight:600;font-style:normal}@media only screen and (max-width:480px){#bodyTable,body{width:100%!important}a,blockquote,body,li,p,table,td{-webkit-text-size-adjust:none!important}body{min-width:100%!important}#bodyTable{max-width:600px!important}#signIn{max-width:280px!important}}\n</style>\n  </head>\n  <body leftmargin=\"0\" marginwidth=\"0\" topmargin=\"0\" marginheight=\"0\" offset=\"0\" style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;margin: 0;padding: 0;font-family: &quot;ProximaNova&quot;, sans-serif;height: 100% !important;\"><center>\n  <table style=\"width: 600px;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;mso-table-lspace: 0pt;mso-table-rspace: 0pt;margin: 0;padding: 0;font-family: &quot;ProximaNova&quot;, sans-serif;border-collapse: collapse !important;height: 100% !important;\" align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" height=\"100%\" width=\"100%\" id=\"bodyTable\">\n    <tr>\n      <td align=\"center\" valign=\"top\" id=\"bodyCell\" style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;mso-table-lspace: 0pt;mso-table-rspace: 0pt;margin: 0;padding: 20px;font-family: &quot;ProximaNova&quot;, sans-serif;height: 100% !important;\">\n      <div class=\"main\">\n        <p style=\"text-align: center;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%; margin-bottom: 30px;\">\n          <img src=\"https://cdn.auth0.com/styleguide/2.0.9/lib/logos/img/badge.png\" width=\"50\" alt=\"Your logo goes here\" style=\"-ms-interpolation-mode: bicubic;border: 0;height: auto;line-height: 100%;outline: none;text-decoration: none;\">\n        </p>\n\n        <!-- Email change content -->\n        {% if operation == ''change_email'' %}\n\n          <p style=\"font-size: 1.2em;line-height: 1.3;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">Your email address has been updated.</p>\n\n        {% else %}\n\n          <!-- Signup email content -->\n          {% if send == ''link'' or send == ''link_ios'' or send == ''link_android'' %}\n\n            <p style=\"font-size: 1.2em;line-height: 1.3;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">Click and confirm that you want to sign in to {{ application.name }}. This link will expire in three minutes.</p>\n\n            <div style=\"text-align:center\">\n            <a id=\"signIn\" style=\"text-transform: uppercase;letter-spacing: 1px;color: #ffffff;text-decoration: none;display: inline-block;min-height: 48px;line-height: 48px;padding-top: 0;padding-right: 26px;padding-bottom: 0;margin: 20px 0;padding-left: 26px;border: 0;outline: 0;background: #eb5424;font-size: 14px;font-style: normal;font-weight: 400;text-align: center;white-space: nowrap;border-radius: 3px;text-overflow: ellipsis;max-width: 280px;overflow: hidden;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\" href=\"{{ link }}\">Sign in to {{ application.name }}</a>\n            </div>\n\n            <p style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">Or sign in using this link:</p>\n            <p style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\"><a style=\"font-size: 12px; color: #A9B3BC; text-decoration: none;word-break: break-all;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\" href=\"{{ link }}\">{{ link }}</a></p>\n\n            {% elsif send == ''code'' %}\n\n            <p style=\"font-size: 1.4em; line-height: 1.3;\">Your verification code is: <b>{{ code }}</b></p>\n\n          {% endif %}\n\n        {% endif %}\n\n        <p style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">If you are having any issues with your account, please don''t hesitate to contact us by replying to this mail.</p>\n\n        <br>\n        Thanks!\n        <br>\n\n        <strong>{{ application.name }}</strong>\n\n        <br><br>\n        <hr style=\"border: 2px solid #EAEEF3; border-bottom: 0; margin: 20px 0;\">\n        <p style=\"text-align: center;color: #A9B3BC;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">\n          If you did not make this request, please contact us by replying to this mail.\n        </p>\n      </div>\n      </td>\n    </tr>\n  </table>\n</center>\n</body>\n</html>","from":"{{ application.name }} <test@auth0.com>","syntax":"liquid","subject":"Welcome to {{ application.name }}"},"disable_signup":false,"brute_force_protection":true},"strategy":"email","name":"email","is_domain_connection":false,"realms":["email"],"enabled_clients":["8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","7A3gY5j2rLPQHl4UzFUlAf9rpBCeCWVU","ltDtQeNbloAWqtmhW3HLmlF3Ogekdwna","C5qOU2xRAkFls7YYLH3oEoOiysvcs2t2","FLIRqmmdlFO8bgpSiI1edt3Z2ckK5Xnr","J1l9laXEKHJIIEjSvvMzvLq2GlZ9p9aB","kTELMnTEVedF64DRw0BkoXbHRopyKPIO","YjhE0LnX8K5EKtNyPBuokAYRWevhwOPk","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","Cizq7JxgSY4pisDFSpZNCOZVch0iGTOS","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_p4uGrcD1txAs77Mv","options":{"email":true,"scope":["email","profile"],"profile":true},"strategy":"google-oauth2","name":"google-oauth2","is_domain_connection":false,"realms":["google-oauth2"],"enabled_clients":["LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","ZpHnzZlq4UA2qJn2oZ9PRawSbkbnpJqa","FLIRqmmdlFO8bgpSiI1edt3Z2ckK5Xnr","y8zHiIOI5UciKi6yh6yPAQ3FpxvghHFb","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","7A3gY5j2rLPQHl4UzFUlAf9rpBCeCWVU","ltDtQeNbloAWqtmhW3HLmlF3Ogekdwna","2TXdYaVPUVJ3Ak3EQbui9wN5mL5I53Mh","8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","C5qOU2xRAkFls7YYLH3oEoOiysvcs2t2","J1l9laXEKHJIIEjSvvMzvLq2GlZ9p9aB","kTELMnTEVedF64DRw0BkoXbHRopyKPIO","kWhMhYgd8cF2qBpEnUBUN7Ksz5t9hjkQ","MT3xpNb0aT1Tey8brhRZJETmrelqC2Yv","YjhE0LnX8K5EKtNyPBuokAYRWevhwOPk","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","Cizq7JxgSY4pisDFSpZNCOZVch0iGTOS","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_XBtRghN11CY13wqL","options":{"cert":"-----BEGIN CERTIFICATE-----\nMIIFsjCCA5qgAwIBAgIURygVMMzdr+Q7rsUaz189JozyHMwwDQYJKoZIhvcNAQEL\nBQAwTjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMQwwCgYDVQQHDANTVkwxDTAL\nBgNVBAoMBGdSUEMxFTATBgNVBAMMDHRlc3QtY2xpZW50MTAeFw0yMTEyMjMxODQy\nNTJaFw0zMTEyMjExODQyNTJaME4xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTEM\nMAoGA1UEBwwDU1ZMMQ0wCwYDVQQKDARnUlBDMRUwEwYDVQQDDAx0ZXN0LWNsaWVu\ndDEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDJ4AqpGetyVSqGUuBJ\nLVFla+7bEfca7UYzfVSSZLZ/X+JDmWIVN8UIPuFib5jhMEc3XaUnFXUmM7zEtz/Z\nG5hapwLwOb2C3ZxOP6PQjYCJxbkLie+b43UQrFu1xxd3vMhVJgcj/AIxEpmszuqO\na6kUrkYifjJADQ+64kZgl66bsTdXMCzpxyFl9xUfff59L8OX+HUfAcoZz3emjg3Z\nJPYURQEmjdZTOau1EjFilwHgd989Jt7NKgx30NXoHmw7nusVBIY94fL2VKN3f1XV\nm0dHu5NI279Q6zr0ZBU7k5T3IeHnzsUesQS4NGlklDWoVTKk73Uv9Pna8yQsSW75\n7PEbHOGp9Knu4bnoGPOlsG81yIPipO6hTgGFK24pF97M9kpGbWqYX4+2vLlrCAfc\nmsHqaUPmQlYeRVTT6vw7ctYo2kyUYGtnODXk76LqewRBVvkzx75QUhfjAyb740Yc\nDmIenc56Tq6gebJHjhEmVSehR6xIpXP7SVeurTyhPsEQnpJHtgs4dcwWOZp7BvPN\nzHXmJqfr7vsshie3vS5kQ0u1e1yqAqXgyDjqKXOkx+dpgUTehSJHhPNHvTc5LXRs\nvvXKYz6FrwR/DZ8t7BNEvPeLjFgxpH7QVJFLCvCbXs5K6yYbsnLfxFIBPRnrbJkI\nsK+sQwnRdnsiUdPsTkG5B2lQfQIDAQABo4GHMIGEMB0GA1UdDgQWBBQ2lBp0PiRH\nHvQ5IRURm8aHsj4RETAfBgNVHSMEGDAWgBQ2lBp0PiRHHvQ5IRURm8aHsj4RETAP\nBgNVHRMBAf8EBTADAQH/MDEGA1UdEQQqMCiGJnNwaWZmZTovL2Zvby5iYXIuY29t\nL2NsaWVudC93b3JrbG9hZC8xMA0GCSqGSIb3DQEBCwUAA4ICAQA1mSkgRclAl+E/\naS9zJ7t8+Y4n3T24nOKKveSIjxXm/zjhWqVsLYBI6kglWtih2+PELvU8JdPqNZK3\n4Kl0Q6FWpVSGDdWN1i6NyORt2ocggL3ke3iXxRk3UpUKJmqwz81VhA2KUHnMlyE0\nIufFfZNwNWWHBv13uJfRbjeQpKPhU+yf4DeXrsWcvrZlGvAET+mcplafUzCp7Iv+\nPcISJtUerbxbVtuHVeZCLlgDXWkLAWJN8rf0dIG4x060LJ+j6j9uRVhb9sZn1HJV\n+j4XdIYm1VKilluhOtNwP2d3Ox/JuTBxf7hFHXZPfMagQE5k5PzmxRaCAEMJ1l2D\nvUbZw+shJfSNoWcBo2qadnUaWT3BmmJRBDh7ZReib/RQ1Rd4ygOyzP3E0vkV4/gq\nyjLdApXh5PZP8KLQZ+1JN/sdWt7VfIt9wYOpkIqujdll51ESHzwQeAK9WVCB4UvV\nz6zdhItB9CRbXPreWC+wCB1xDovIzFKOVsLs5+Gqs1m7VinG2LxbDqaKyo/FB0Hx\nx0acBNzezLWoDwXYQrN0T0S4pnqhKD1CYPpdArBkNezUYAjS725FkApuK+mnBX3U\n0msBffEaUEOkcyar1EW2m/33vpetD/k3eQQkmvQf4Hbiu9AF+9cNDm/hMuXEw5EX\nGA91fn0891b5eEW8BJHXX0jri0aN8g==\n-----END CERTIFICATE-----\n","expires":"2031-12-21T18:42:52.000Z","subject":{"commonName":"test-client1","countryName":"US","localityName":"SVL","organizationName":"gRPC","stateOrProvinceName":"CA"},"fieldsMap":{},"signingCert":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZzakNDQTVxZ0F3SUJBZ0lVUnlnVk1NemRyK1E3cnNVYXoxODlKb3p5SE13d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1RqRUxNQWtHQTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdNQWtOQk1Rd3dDZ1lEVlFRSERBTlRWa3d4RFRBTApCZ05WQkFvTUJHZFNVRU14RlRBVEJnTlZCQU1NREhSbGMzUXRZMnhwWlc1ME1UQWVGdzB5TVRFeU1qTXhPRFF5Ck5USmFGdzB6TVRFeU1qRXhPRFF5TlRKYU1FNHhDekFKQmdOVkJBWVRBbFZUTVFzd0NRWURWUVFJREFKRFFURU0KTUFvR0ExVUVCd3dEVTFaTU1RMHdDd1lEVlFRS0RBUm5VbEJETVJVd0V3WURWUVFEREF4MFpYTjBMV05zYVdWdQpkREV3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRREo0QXFwR2V0eVZTcUdVdUJKCkxWRmxhKzdiRWZjYTdVWXpmVlNTWkxaL1grSkRtV0lWTjhVSVB1RmliNWpoTUVjM1hhVW5GWFVtTTd6RXR6L1oKRzVoYXB3THdPYjJDM1p4T1A2UFFqWUNKeGJrTGllK2I0M1VRckZ1MXh4ZDN2TWhWSmdjai9BSXhFcG1zenVxTwphNmtVcmtZaWZqSkFEUSs2NGtaZ2w2NmJzVGRYTUN6cHh5Rmw5eFVmZmY1OUw4T1grSFVmQWNvWnozZW1qZzNaCkpQWVVSUUVtamRaVE9hdTFFakZpbHdIZ2Q5ODlKdDdOS2d4MzBOWG9IbXc3bnVzVkJJWTk0ZkwyVktOM2YxWFYKbTBkSHU1TkkyNzlRNnpyMFpCVTdrNVQzSWVIbnpzVWVzUVM0Tkdsa2xEV29WVEtrNzNVdjlQbmE4eVFzU1c3NQo3UEViSE9HcDlLbnU0Ym5vR1BPbHNHODF5SVBpcE82aFRnR0ZLMjRwRjk3TTlrcEdiV3FZWDQrMnZMbHJDQWZjCm1zSHFhVVBtUWxZZVJWVFQ2dnc3Y3RZbzJreVVZR3RuT0RYazc2THFld1JCVnZreng3NVFVaGZqQXliNzQwWWMKRG1JZW5jNTZUcTZnZWJKSGpoRW1WU2VoUjZ4SXBYUDdTVmV1clR5aFBzRVFucEpIdGdzNGRjd1dPWnA3QnZQTgp6SFhtSnFmcjd2c3NoaWUzdlM1a1EwdTFlMXlxQXFYZ3lEanFLWE9reCtkcGdVVGVoU0pIaFBOSHZUYzVMWFJzCnZ2WEtZejZGcndSL0RaOHQ3Qk5FdlBlTGpGZ3hwSDdRVkpGTEN2Q2JYczVLNnlZYnNuTGZ4RklCUFJucmJKa0kKc0src1F3blJkbnNpVWRQc1RrRzVCMmxRZlFJREFRQUJvNEdITUlHRU1CMEdBMVVkRGdRV0JCUTJsQnAwUGlSSApIdlE1SVJVUm04YUhzajRSRVRBZkJnTlZIU01FR0RBV2dCUTJsQnAwUGlSSEh2UTVJUlVSbThhSHNqNFJFVEFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTURFR0ExVWRFUVFxTUNpR0puTndhV1ptWlRvdkwyWnZieTVpWVhJdVkyOXQKTDJOc2FXVnVkQzkzYjNKcmJHOWhaQzh4TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFBMW1Ta2dSY2xBbCtFLwphUzl6Sjd0OCtZNG4zVDI0bk9LS3ZlU0lqeFhtL3pqaFdxVnNMWUJJNmtnbFd0aWgyK1BFTHZVOEpkUHFOWkszCjRLbDBRNkZXcFZTR0RkV04xaTZOeU9SdDJvY2dnTDNrZTNpWHhSazNVcFVLSm1xd3o4MVZoQTJLVUhuTWx5RTAKSXVmRmZaTndOV1dIQnYxM3VKZlJiamVRcEtQaFUreWY0RGVYcnNXY3ZyWmxHdkFFVCttY3BsYWZVekNwN0l2KwpQY0lTSnRVZXJieGJWdHVIVmVaQ0xsZ0RYV2tMQVdKTjhyZjBkSUc0eDA2MExKK2o2ajl1UlZoYjlzWm4xSEpWCitqNFhkSVltMVZLaWxsdWhPdE53UDJkM094L0p1VEJ4ZjdoRkhYWlBmTWFnUUU1azVQem14UmFDQUVNSjFsMkQKdlViWncrc2hKZlNOb1djQm8ycWFkblVhV1QzQm1tSlJCRGg3WlJlaWIvUlExUmQ0eWdPeXpQM0UwdmtWNC9ncQp5akxkQXBYaDVQWlA4S0xRWisxSk4vc2RXdDdWZkl0OXdZT3BrSXF1amRsbDUxRVNIendRZUFLOVdWQ0I0VXZWCno2emRoSXRCOUNSYlhQcmVXQyt3Q0IxeERvdkl6RktPVnNMczUrR3FzMW03VmluRzJMeGJEcWFLeW8vRkIwSHgKeDBhY0JOemV6TFdvRHdYWVFyTjBUMFM0cG5xaEtEMUNZUHBkQXJCa05lelVZQWpTNzI1RmtBcHVLK21uQlgzVQowbXNCZmZFYVVFT2tjeWFyMUVXMm0vMzN2cGV0RC9rM2VRUWttdlFmNEhiaXU5QUYrOWNORG0vaE11WEV3NUVYCkdBOTFmbjA4OTFiNWVFVzhCSkhYWDBqcmkwYU44Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K","thumbprints":["a50f15b92a9da85db847562a9876fdcb71f3f09b"],"idpinitiated":{"enabled":true},"disableSignout":true,"signInEndpoint":"https://example.com","digestAlgorithm":"","signOutEndpoint":"","signSAMLRequest":true,"user_id_attribute":"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier","signatureAlgorithm":""},"strategy":"samlp","name":"samlp","provisioning_ticket_url":"https://terraform-provider-auth0-dev.us.auth0.com/p/samlp/2jZreSKN","is_domain_connection":false,"show_as_button":false,"realms":["samlp"],"enabled_clients":["JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_WdzxNQ8IrXra406n","options":{"from":"+15673812244","name":"sms","totp":{"length":6,"time_step":180},"syntax":"md_with_macros","template":"Your verification code is: @@password@@","twilio_sid":"ACc95b2e7e2426f6c6d795680e98c55ab5","twilio_token":"a79f8df7703809bd15cff7f5aab1ebf9","disable_signup":false,"messaging_service_sid":null,"brute_force_protection":true},"strategy":"sms","name":"sms","is_domain_connection":false,"realms":["sms"],"enabled_clients":["YjhE0LnX8K5EKtNyPBuokAYRWevhwOPk","LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_ydYMO17mFY5OiT4u","options":{"mfa":{"active":true,"return_enroll_settings":true},"attributes":{"email":{"signup":{"status":"required","verification":{"active":true}},"identifier":{"active":true},"profile_required":true,"verification_method":"otp"}},"import_mode":false,"configuration":{},"customScripts":{"login":"function login(email, password, callback) {\n  // This script should authenticate a user against the credentials stored in\n  // your database.\n  // It is executed when a user attempts to log in or immediately after signing\n  // up (as a verification that the user was successfully signed up).\n  //\n  // Everything returned by this script will be set as part of the user profile\n  // and will be visible by any of the tenant admins. Avoid adding attributes\n  // with values such as passwords, keys, secrets, etc.\n  //\n  // The `password` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database. For example:\n  //\n  //     var bcrypt = require(''bcrypt@0.8.5'');\n  //     bcrypt.compare(password, dbPasswordHash, function(err, res)) { ... }\n  //\n  // There are three ways this script can finish:\n  // 1. The user''s credentials are valid. The returned user profile should be in\n  // the following format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema\n  //     var profile = {\n  //       user_id: ..., // user_id is mandatory\n  //       email: ...,\n  //       [...]\n  //     };\n  //     callback(null, profile);\n  // 2. The user''s credentials are invalid\n  //     callback(new WrongUsernameOrPasswordError(email, \"my error message\"));\n  //\n  //    Note: Passing no arguments or a falsey first argument to\n  //    `WrongUsernameOrPasswordError` will result in the error being logged as\n  //    an `fu` event (invalid username/email) with an empty string for a user_id.\n  //    Providing a truthy first argument will result in the error being logged\n  //    as an `fp` event (the user exists, but the password is invalid) with a\n  //    user_id value of \"auth0|<first argument>\". See the `Log Event Type Codes`\n  //    documentation for more information about these event types:\n  //    https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n  //\n  // A list of Node.js modules which can be referenced is available here:\n  //\n  //    https://tehsis.github.io/webtaskio-canirequire/\n\n  const msg = ''Please implement the Login script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","create":"function create(user, callback) {\n  // This script should create a user entry in your existing database. It will\n  // be executed when a user attempts to sign up, or when a user is created\n  // through the Auth0 dashboard or API.\n  // When this script has finished executing, the Login script will be\n  // executed immediately afterwards, to verify that the user was created\n  // successfully.\n  //\n  // The user object will always contain the following properties:\n  // * email: the user''s email\n  // * password: the password entered by the user, in plain text\n  // * tenant: the name of this Auth0 account\n  // * client_id: the client ID of the application where the user signed up, or\n  //              API key if created through the API or Auth0 dashboard\n  // * connection: the name of this database connection\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully created\n  //     callback(null);\n  // 2. This user already exists in your database\n  //     callback(new ValidationError(\"user_exists\", \"my error message\"));\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Create script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","delete":"function remove(id, callback) {\n  // This script remove a user from your existing database.\n  // It is executed whenever a user is deleted from the API or Auth0 dashboard.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user was removed successfully:\n  //     callback(null);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Delete script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","verify":"function verify(email, callback) {\n  // This script should mark the current user''s email address as verified in\n  // your database.\n  // It is executed whenever a user clicks the verification link sent by email.\n  // These emails can be customized at https://manage.auth0.com/#/emails.\n  // It is safe to assume that the user''s email already exists in your database,\n  // because verification emails, if enabled, are sent immediately after a\n  // successful signup.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user''s email was verified successfully\n  //     callback(null, true);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the verification link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Verify script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","get_user":"function getByEmail(email, callback) {\n  // This script should retrieve a user profile from your existing database,\n  // without authenticating the user.\n  // It is used to check if a user exists before executing flows that do not\n  // require authentication (signup and password reset).\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully found. The profile should be in the following\n  // format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema.\n  //     callback(null, profile);\n  // 2. A user was not found\n  //     callback(null);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Get User script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","change_password":"function changePassword(email, newPassword, callback) {\n  // This script should change the password stored for the current user in your\n  // database. It is executed when the user clicks on the confirmation link\n  // after a reset password request.\n  // The content and behavior of password confirmation emails can be customized\n  // here: https://manage.auth0.com/#/emails\n  // The `newPassword` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database.\n  //\n  // There are three ways that this script can finish:\n  // 1. The user''s password was updated successfully:\n  //     callback(null, true);\n  // 2. The user''s password was not updated:\n  //     callback(null, false);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the confirmation link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Change Password script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n"},"disable_signup":false,"passwordPolicy":"fair","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"password_history":{"size":5,"enable":false},"strategy_version":2,"password_dictionary":{"enable":false,"dictionary":[]},"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true,"password_no_personal_info":{"enable":false},"password_complexity_options":{"min_length":8},"enabledDatabaseCustomization":false},"strategy":"auth0","name":"test-db-conn","is_domain_connection":false,"realms":["test-db-conn"],"enabled_clients":["LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_83xIjpryKTaudn3K","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Username-Password-Authentication","is_domain_connection":false,"realms":["Username-Password-Authentication"],"enabled_clients":["J1l9laXEKHJIIEjSvvMzvLq2GlZ9p9aB","LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","ZpHnzZlq4UA2qJn2oZ9PRawSbkbnpJqa","FLIRqmmdlFO8bgpSiI1edt3Z2ckK5Xnr","MT3xpNb0aT1Tey8brhRZJETmrelqC2Yv","y8zHiIOI5UciKi6yh6yPAQ3FpxvghHFb","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","7A3gY5j2rLPQHl4UzFUlAf9rpBCeCWVU","ltDtQeNbloAWqtmhW3HLmlF3Ogekdwna","2TXdYaVPUVJ3Ak3EQbui9wN5mL5I53Mh","8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","C5qOU2xRAkFls7YYLH3oEoOiysvcs2t2","kTELMnTEVedF64DRw0BkoXbHRopyKPIO","kWhMhYgd8cF2qBpEnUBUN7Ksz5t9hjkQ","YjhE0LnX8K5EKtNyPBuokAYRWevhwOPk","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","Cizq7JxgSY4pisDFSpZNCOZVch0iGTOS","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]}]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 442.229583ms
    - id: 10
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 415.449708ms
    - id: 11
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/clients/19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"name":"Acceptance Test - TestAccDataSourceConnection","client_id":"19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","client_secret":"[REDACTED]","app_type":"non_interactive","is_first_party":true,"is_token_endpoint_ip_header_trusted":false,"oidc_conformant":false,"jwt_configuration":{"secret_encoded":false,"lifetime_in_seconds":36000},"signing_keys":[{"cert":"[REDACTED]"}],"sso_disabled":false,"cross_origin_authentication":false,"grant_types":["authorization_code","implicit","refresh_token","client_credentials"],"custom_login_page_on":true,"token_endpoint_auth_method":"client_secret_post","refresh_token":{"rotation_type":"non-rotating","expiration_type":"non-expiring","leeway":0,"token_lifetime":31557600,"infinite_token_lifetime":true,"infinite_idle_token_lifetime":true,"idle_token_lifetime":2592000},"oidc_backchannel_logout":{},"oidc_logout":{"backchannel_logout_initiators":{"mode":"custom","selected_initiators":["rp-logout","idp-logout"]}}}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 484.835833ms
    - id: 12
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 427.489959ms
    - id: 13
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections?include_totals=true&per_page=50&take=100
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"connections":[{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"],"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"]},{"id":"con_1UIbZoO6NXBz5Byh","options":{"type":"back_channel","issuer":"https://example.okta.com","jwks_uri":"https://example.okta.com/oauth2/v1/keys","client_id":"1234567","attribute_map":{"mapping_mode":"basic_profile"},"client_secret":"1234567","schema_version":"oidc-V4","token_endpoint":"https://example.okta.com/oauth2/v1/token","userinfo_endpoint":null,"connection_settings":{"pkce":"auto"},"authorization_endpoint":"https://example.okta.com/oauth2/v1/authorize"},"strategy":"okta","name":"Acceptance-Test-Enterprise-Connection-testaccorganizationconnection","is_domain_connection":false,"show_as_button":false,"display_name":"testaccorganizationconnection","realms":["Acceptance-Test-Enterprise-Connection-testaccorganizationconnection"],"enabled_clients":["JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_qGfQLHT8pZxc1Pak","options":{"type":"back_channel","issuer":"https://example.okta.com","jwks_uri":"https://example.okta.com/oauth2/v1/keys","client_id":"1234567","attribute_map":{"mapping_mode":"basic_profile"},"client_secret":"1234567","schema_version":"oidc-V4","token_endpoint":"https://example.okta.com/oauth2/v1/token","userinfo_endpoint":null,"connection_settings":{"pkce":"auto"},"authorization_endpoint":"https://example.okta.com/oauth2/v1/authorize"},"strategy":"okta","name":"Acceptance-Test-SCIM-Connection-TestAccDataSCIMConfiguration","is_domain_connection":false,"show_as_button":false,"display_name":"Acceptance-Test-SCIM-TestAccDataSCIMConfiguration","realms":["Acceptance-Test-SCIM-Connection-TestAccDataSCIMConfiguration"],"enabled_clients":["JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_OS2XtCL9M7i8jant","options":{"mfa":{"active":true,"return_enroll_settings":true},"attributes":{"email":{"signup":{"status":"required","verification":{"active":true}},"identifier":{"active":true},"profile_required":true,"verification_method":"link"}},"import_mode":false,"configuration":{},"customScripts":{"login":"function login(email, password, callback) {\n  // This script should authenticate a user against the credentials stored in\n  // your database.\n  // It is executed when a user attempts to log in or immediately after signing\n  // up (as a verification that the user was successfully signed up).\n  //\n  // Everything returned by this script will be set as part of the user profile\n  // and will be visible by any of the tenant admins. Avoid adding attributes\n  // with values such as passwords, keys, secrets, etc.\n  //\n  // The `password` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database. For example:\n  //\n  //     var bcrypt = require(''bcrypt@0.8.5'');\n  //     bcrypt.compare(password, dbPasswordHash, function(err, res)) { ... }\n  //\n  // There are three ways this script can finish:\n  // 1. The user''s credentials are valid. The returned user profile should be in\n  // the following format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema\n  //     var profile = {\n  //       user_id: ..., // user_id is mandatory\n  //       email: ...,\n  //       [...]\n  //     };\n  //     callback(null, profile);\n  // 2. The user''s credentials are invalid\n  //     callback(new WrongUsernameOrPasswordError(email, \"my error message\"));\n  //\n  //    Note: Passing no arguments or a falsey first argument to\n  //    `WrongUsernameOrPasswordError` will result in the error being logged as\n  //    an `fu` event (invalid username/email) with an empty string for a user_id.\n  //    Providing a truthy first argument will result in the error being logged\n  //    as an `fp` event (the user exists, but the password is invalid) with a\n  //    user_id value of \"auth0|<first argument>\". See the `Log Event Type Codes`\n  //    documentation for more information about these event types:\n  //    https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n  //\n  // A list of Node.js modules which can be referenced is available here:\n  //\n  //    https://tehsis.github.io/webtaskio-canirequire/\n\n  const msg = ''Please implement the Login script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","create":"function create(user, callback) {\n  // This script should create a user entry in your existing database. It will\n  // be executed when a user attempts to sign up, or when a user is created\n  // through the Auth0 dashboard or API.\n  // When this script has finished executing, the Login script will be\n  // executed immediately afterwards, to verify that the user was created\n  // successfully.\n  //\n  // The user object will always contain the following properties:\n  // * email: the user''s email\n  // * password: the password entered by the user, in plain text\n  // * tenant: the name of this Auth0 account\n  // * client_id: the client ID of the application where the user signed up, or\n  //              API key if created through the API or Auth0 dashboard\n  // * connection: the name of this database connection\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully created\n  //     callback(null);\n  // 2. This user already exists in your database\n  //     callback(new ValidationError(\"user_exists\", \"my error message\"));\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Create script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","delete":"function remove(id, callback) {\n  // This script remove a user from your existing database.\n  // It is executed whenever a user is deleted from the API or Auth0 dashboard.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user was removed successfully:\n  //     callback(null);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Delete script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","verify":"function verify(email, callback) {\n  // This script should mark the current user''s email address as verified in\n  // your database.\n  // It is executed whenever a user clicks the verification link sent by email.\n  // These emails can be customized at https://manage.auth0.com/#/emails.\n  // It is safe to assume that the user''s email already exists in your database,\n  // because verification emails, if enabled, are sent immediately after a\n  // successful signup.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user''s email was verified successfully\n  //     callback(null, true);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the verification link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Verify script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","get_user":"function getByEmail(email, callback) {\n  // This script should retrieve a user profile from your existing database,\n  // without authenticating the user.\n  // It is used to check if a user exists before executing flows that do not\n  // require authentication (signup and password reset).\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully found. The profile should be in the following\n  // format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema.\n  //     callback(null, profile);\n  // 2. A user was not found\n  //     callback(null);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Get User script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","change_password":"function changePassword(email, newPassword, callback) {\n  // This script should change the password stored for the current user in your\n  // database. It is executed when the user clicks on the confirmation link\n  // after a reset password request.\n  // The content and behavior of password confirmation emails can be customized\n  // here: https://manage.auth0.com/#/emails\n  // The `newPassword` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database.\n  //\n  // There are three ways that this script can finish:\n  // 1. The user''s password was updated successfully:\n  //     callback(null, true);\n  // 2. The user''s password was not updated:\n  //     callback(null, false);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the confirmation link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Change Password script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n"},"disable_signup":false,"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"password_history":{"size":5,"enable":false},"strategy_version":2,"password_dictionary":{"enable":false,"dictionary":[]},"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true,"password_no_personal_info":{"enable":false},"password_complexity_options":{"min_length":8},"enabledDatabaseCustomization":false},"strategy":"auth0","name":"conn","is_domain_connection":false,"realms":["conn"],"enabled_clients":["CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","Cizq7JxgSY4pisDFSpZNCOZVch0iGTOS","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_CTQfZ88bvrXr6FR8","options":{"mfa":{"active":true,"return_enroll_settings":true},"attributes":{"email":{"signup":{"status":"required","verification":{"active":true}},"identifier":{"active":true},"profile_required":true,"verification_method":"otp"}},"import_mode":false,"configuration":{},"customScripts":{"login":"function login(email, password, callback) {\n  // This script should authenticate a user against the credentials stored in\n  // your database.\n  // It is executed when a user attempts to log in or immediately after signing\n  // up (as a verification that the user was successfully signed up).\n  //\n  // Everything returned by this script will be set as part of the user profile\n  // and will be visible by any of the tenant admins. Avoid adding attributes\n  // with values such as passwords, keys, secrets, etc.\n  //\n  // The `password` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database. For example:\n  //\n  //     var bcrypt = require(''bcrypt@0.8.5'');\n  //     bcrypt.compare(password, dbPasswordHash, function(err, res)) { ... }\n  //\n  // There are three ways this script can finish:\n  // 1. The user''s credentials are valid. The returned user profile should be in\n  // the following format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema\n  //     var profile = {\n  //       user_id: ..., // user_id is mandatory\n  //       email: ...,\n  //       [...]\n  //     };\n  //     callback(null, profile);\n  // 2. The user''s credentials are invalid\n  //     callback(new WrongUsernameOrPasswordError(email, \"my error message\"));\n  //\n  //    Note: Passing no arguments or a falsey first argument to\n  //    `WrongUsernameOrPasswordError` will result in the error being logged as\n  //    an `fu` event (invalid username/email) with an empty string for a user_id.\n  //    Providing a truthy first argument will result in the error being logged\n  //    as an `fp` event (the user exists, but the password is invalid) with a\n  //    user_id value of \"auth0|<first argument>\". See the `Log Event Type Codes`\n  //    documentation for more information about these event types:\n  //    https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n  //\n  // A list of Node.js modules which can be referenced is available here:\n  //\n  //    https://tehsis.github.io/webtaskio-canirequire/\n\n  const msg = ''Please implement the Login script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","create":"function create(user, callback) {\n  // This script should create a user entry in your existing database. It will\n  // be executed when a user attempts to sign up, or when a user is created\n  // through the Auth0 dashboard or API.\n  // When this script has finished executing, the Login script will be\n  // executed immediately afterwards, to verify that the user was created\n  // successfully.\n  //\n  // The user object will always contain the following properties:\n  // * email: the user''s email\n  // * password: the password entered by the user, in plain text\n  // * tenant: the name of this Auth0 account\n  // * client_id: the client ID of the application where the user signed up, or\n  //              API key if created through the API or Auth0 dashboard\n  // * connection: the name of this database connection\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully created\n  //     callback(null);\n  // 2. This user already exists in your database\n  //     callback(new ValidationError(\"user_exists\", \"my error message\"));\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Create script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","delete":"function remove(id, callback) {\n  // This script remove a user from your existing database.\n  // It is executed whenever a user is deleted from the API or Auth0 dashboard.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user was removed successfully:\n  //     callback(null);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Delete script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","verify":"function verify(email, callback) {\n  // This script should mark the current user''s email address as verified in\n  // your database.\n  // It is executed whenever a user clicks the verification link sent by email.\n  // These emails can be customized at https://manage.auth0.com/#/emails.\n  // It is safe to assume that the user''s email already exists in your database,\n  // because verification emails, if enabled, are sent immediately after a\n  // successful signup.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user''s email was verified successfully\n  //     callback(null, true);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the verification link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Verify script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","get_user":"function getByEmail(email, callback) {\n  // This script should retrieve a user profile from your existing database,\n  // without authenticating the user.\n  // It is used to check if a user exists before executing flows that do not\n  // require authentication (signup and password reset).\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully found. The profile should be in the following\n  // format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema.\n  //     callback(null, profile);\n  // 2. A user was not found\n  //     callback(null);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Get User script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","change_password":"function changePassword(email, newPassword, callback) {\n  // This script should change the password stored for the current user in your\n  // database. It is executed when the user clicks on the confirmation link\n  // after a reset password request.\n  // The content and behavior of password confirmation emails can be customized\n  // here: https://manage.auth0.com/#/emails\n  // The `newPassword` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database.\n  //\n  // There are three ways that this script can finish:\n  // 1. The user''s password was updated successfully:\n  //     callback(null, true);\n  // 2. The user''s password was not updated:\n  //     callback(null, false);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the confirmation link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Change Password script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n"},"disable_signup":false,"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"password_history":{"size":5,"enable":false},"strategy_version":2,"requires_username":false,"password_dictionary":{"enable":false,"dictionary":[]},"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true,"password_no_personal_info":{"enable":false},"password_complexity_options":{"min_length":8},"enabledDatabaseCustomization":false},"strategy":"auth0","name":"Connectionnnn","is_domain_connection":false,"realms":["Connectionnnn"],"enabled_clients":["LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_TlQiRHH7mG8zxl6b","options":{"passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"password_history":{"size":5,"enable":true},"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"conn-test","is_domain_connection":false,"realms":["conn-test"],"enabled_clients":["LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_jAyV4JvO7mvw4U0G","options":{"name":"email","totp":{"length":6,"time_step":180},"email":{"body":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <style type=\"text/css\">.ExternalClass,.ExternalClass div,.ExternalClass font,.ExternalClass p,.ExternalClass span,.ExternalClass td,img{line-height:100%}#outlook a{padding:0}.ExternalClass,.ReadMsgBody{width:100%}a,blockquote,body,li,p,table,td{-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}table,td{mso-table-lspace:0;mso-table-rspace:0}img{-ms-interpolation-mode:bicubic;border:0;height:auto;outline:0;text-decoration:none}table{border-collapse:collapse!important}#bodyCell,#bodyTable,body{height:100%!important;margin:0;padding:0;font-family:ProximaNova,sans-serif}#bodyCell{padding:20px}#bodyTable{width:600px}@font-face{font-family:ProximaNova;src:url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-regular-webfont-webfont.eot);src:url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-regular-webfont-webfont.eot?#iefix) format(''embedded-opentype''),url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-regular-webfont-webfont.woff) format(''woff'');font-weight:400;font-style:normal}@font-face{font-family:ProximaNova;src:url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-semibold-webfont-webfont.eot);src:url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-semibold-webfont-webfont.eot?#iefix) format(''embedded-opentype''),url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-semibold-webfont-webfont.woff) format(''woff'');font-weight:600;font-style:normal}@media only screen and (max-width:480px){#bodyTable,body{width:100%!important}a,blockquote,body,li,p,table,td{-webkit-text-size-adjust:none!important}body{min-width:100%!important}#bodyTable{max-width:600px!important}#signIn{max-width:280px!important}}\n</style>\n  </head>\n  <body leftmargin=\"0\" marginwidth=\"0\" topmargin=\"0\" marginheight=\"0\" offset=\"0\" style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;margin: 0;padding: 0;font-family: &quot;ProximaNova&quot;, sans-serif;height: 100% !important;\"><center>\n  <table style=\"width: 600px;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;mso-table-lspace: 0pt;mso-table-rspace: 0pt;margin: 0;padding: 0;font-family: &quot;ProximaNova&quot;, sans-serif;border-collapse: collapse !important;height: 100% !important;\" align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" height=\"100%\" width=\"100%\" id=\"bodyTable\">\n    <tr>\n      <td align=\"center\" valign=\"top\" id=\"bodyCell\" style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;mso-table-lspace: 0pt;mso-table-rspace: 0pt;margin: 0;padding: 20px;font-family: &quot;ProximaNova&quot;, sans-serif;height: 100% !important;\">\n      <div class=\"main\">\n        <p style=\"text-align: center;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%; margin-bottom: 30px;\">\n          <img src=\"https://cdn.auth0.com/styleguide/2.0.9/lib/logos/img/badge.png\" width=\"50\" alt=\"Your logo goes here\" style=\"-ms-interpolation-mode: bicubic;border: 0;height: auto;line-height: 100%;outline: none;text-decoration: none;\">\n        </p>\n\n        <!-- Email change content -->\n        {% if operation == ''change_email'' %}\n\n          <p style=\"font-size: 1.2em;line-height: 1.3;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">Your email address has been updated.</p>\n\n        {% else %}\n\n          <!-- Signup email content -->\n          {% if send == ''link'' or send == ''link_ios'' or send == ''link_android'' %}\n\n            <p style=\"font-size: 1.2em;line-height: 1.3;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">Click and confirm that you want to sign in to {{ application.name }}. This link will expire in three minutes.</p>\n\n            <div style=\"text-align:center\">\n            <a id=\"signIn\" style=\"text-transform: uppercase;letter-spacing: 1px;color: #ffffff;text-decoration: none;display: inline-block;min-height: 48px;line-height: 48px;padding-top: 0;padding-right: 26px;padding-bottom: 0;margin: 20px 0;padding-left: 26px;border: 0;outline: 0;background: #eb5424;font-size: 14px;font-style: normal;font-weight: 400;text-align: center;white-space: nowrap;border-radius: 3px;text-overflow: ellipsis;max-width: 280px;overflow: hidden;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\" href=\"{{ link }}\">Sign in to {{ application.name }}</a>\n            </div>\n\n            <p style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">Or sign in using this link:</p>\n            <p style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\"><a style=\"font-size: 12px; color: #A9B3BC; text-decoration: none;word-break: break-all;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\" href=\"{{ link }}\">{{ link }}</a></p>\n\n            {% elsif send == ''code'' %}\n\n            <p style=\"font-size: 1.4em; line-height: 1.3;\">Your verification code is: <b>{{ code }}</b></p>\n\n          {% endif %}\n\n        {% endif %}\n\n        <p style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">If you are having any issues with your account, please don''t hesitate to contact us by replying to this mail.</p>\n\n        <br>\n        Thanks!\n        <br>\n\n        <strong>{{ application.name }}</strong>\n\n        <br><br>\n        <hr style=\"border: 2px solid #EAEEF3; border-bottom: 0; margin: 20px 0;\">\n        <p style=\"text-align: center;color: #A9B3BC;-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;\">\n          If you did not make this request, please contact us by replying to this mail.\n        </p>\n      </div>\n      </td>\n    </tr>\n  </table>\n</center>\n</body>\n</html>","from":"{{ application.name }} <test@auth0.com>","syntax":"liquid","subject":"Welcome to {{ application.name }}"},"disable_signup":false,"brute_force_protection":true},"strategy":"email","name":"email","is_domain_connection":false,"realms":["email"],"enabled_clients":["8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","7A3gY5j2rLPQHl4UzFUlAf9rpBCeCWVU","ltDtQeNbloAWqtmhW3HLmlF3Ogekdwna","C5qOU2xRAkFls7YYLH3oEoOiysvcs2t2","FLIRqmmdlFO8bgpSiI1edt3Z2ckK5Xnr","J1l9laXEKHJIIEjSvvMzvLq2GlZ9p9aB","kTELMnTEVedF64DRw0BkoXbHRopyKPIO","YjhE0LnX8K5EKtNyPBuokAYRWevhwOPk","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","Cizq7JxgSY4pisDFSpZNCOZVch0iGTOS","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_p4uGrcD1txAs77Mv","options":{"email":true,"scope":["email","profile"],"profile":true},"strategy":"google-oauth2","name":"google-oauth2","is_domain_connection":false,"realms":["google-oauth2"],"enabled_clients":["LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","ZpHnzZlq4UA2qJn2oZ9PRawSbkbnpJqa","FLIRqmmdlFO8bgpSiI1edt3Z2ckK5Xnr","y8zHiIOI5UciKi6yh6yPAQ3FpxvghHFb","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","7A3gY5j2rLPQHl4UzFUlAf9rpBCeCWVU","ltDtQeNbloAWqtmhW3HLmlF3Ogekdwna","2TXdYaVPUVJ3Ak3EQbui9wN5mL5I53Mh","8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","C5qOU2xRAkFls7YYLH3oEoOiysvcs2t2","J1l9laXEKHJIIEjSvvMzvLq2GlZ9p9aB","kTELMnTEVedF64DRw0BkoXbHRopyKPIO","kWhMhYgd8cF2qBpEnUBUN7Ksz5t9hjkQ","MT3xpNb0aT1Tey8brhRZJETmrelqC2Yv","YjhE0LnX8K5EKtNyPBuokAYRWevhwOPk","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","Cizq7JxgSY4pisDFSpZNCOZVch0iGTOS","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_XBtRghN11CY13wqL","options":{"cert":"-----BEGIN CERTIFICATE-----\nMIIFsjCCA5qgAwIBAgIURygVMMzdr+Q7rsUaz189JozyHMwwDQYJKoZIhvcNAQEL\nBQAwTjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMQwwCgYDVQQHDANTVkwxDTAL\nBgNVBAoMBGdSUEMxFTATBgNVBAMMDHRlc3QtY2xpZW50MTAeFw0yMTEyMjMxODQy\nNTJaFw0zMTEyMjExODQyNTJaME4xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTEM\nMAoGA1UEBwwDU1ZMMQ0wCwYDVQQKDARnUlBDMRUwEwYDVQQDDAx0ZXN0LWNsaWVu\ndDEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDJ4AqpGetyVSqGUuBJ\nLVFla+7bEfca7UYzfVSSZLZ/X+JDmWIVN8UIPuFib5jhMEc3XaUnFXUmM7zEtz/Z\nG5hapwLwOb2C3ZxOP6PQjYCJxbkLie+b43UQrFu1xxd3vMhVJgcj/AIxEpmszuqO\na6kUrkYifjJADQ+64kZgl66bsTdXMCzpxyFl9xUfff59L8OX+HUfAcoZz3emjg3Z\nJPYURQEmjdZTOau1EjFilwHgd989Jt7NKgx30NXoHmw7nusVBIY94fL2VKN3f1XV\nm0dHu5NI279Q6zr0ZBU7k5T3IeHnzsUesQS4NGlklDWoVTKk73Uv9Pna8yQsSW75\n7PEbHOGp9Knu4bnoGPOlsG81yIPipO6hTgGFK24pF97M9kpGbWqYX4+2vLlrCAfc\nmsHqaUPmQlYeRVTT6vw7ctYo2kyUYGtnODXk76LqewRBVvkzx75QUhfjAyb740Yc\nDmIenc56Tq6gebJHjhEmVSehR6xIpXP7SVeurTyhPsEQnpJHtgs4dcwWOZp7BvPN\nzHXmJqfr7vsshie3vS5kQ0u1e1yqAqXgyDjqKXOkx+dpgUTehSJHhPNHvTc5LXRs\nvvXKYz6FrwR/DZ8t7BNEvPeLjFgxpH7QVJFLCvCbXs5K6yYbsnLfxFIBPRnrbJkI\nsK+sQwnRdnsiUdPsTkG5B2lQfQIDAQABo4GHMIGEMB0GA1UdDgQWBBQ2lBp0PiRH\nHvQ5IRURm8aHsj4RETAfBgNVHSMEGDAWgBQ2lBp0PiRHHvQ5IRURm8aHsj4RETAP\nBgNVHRMBAf8EBTADAQH/MDEGA1UdEQQqMCiGJnNwaWZmZTovL2Zvby5iYXIuY29t\nL2NsaWVudC93b3JrbG9hZC8xMA0GCSqGSIb3DQEBCwUAA4ICAQA1mSkgRclAl+E/\naS9zJ7t8+Y4n3T24nOKKveSIjxXm/zjhWqVsLYBI6kglWtih2+PELvU8JdPqNZK3\n4Kl0Q6FWpVSGDdWN1i6NyORt2ocggL3ke3iXxRk3UpUKJmqwz81VhA2KUHnMlyE0\nIufFfZNwNWWHBv13uJfRbjeQpKPhU+yf4DeXrsWcvrZlGvAET+mcplafUzCp7Iv+\nPcISJtUerbxbVtuHVeZCLlgDXWkLAWJN8rf0dIG4x060LJ+j6j9uRVhb9sZn1HJV\n+j4XdIYm1VKilluhOtNwP2d3Ox/JuTBxf7hFHXZPfMagQE5k5PzmxRaCAEMJ1l2D\nvUbZw+shJfSNoWcBo2qadnUaWT3BmmJRBDh7ZReib/RQ1Rd4ygOyzP3E0vkV4/gq\nyjLdApXh5PZP8KLQZ+1JN/sdWt7VfIt9wYOpkIqujdll51ESHzwQeAK9WVCB4UvV\nz6zdhItB9CRbXPreWC+wCB1xDovIzFKOVsLs5+Gqs1m7VinG2LxbDqaKyo/FB0Hx\nx0acBNzezLWoDwXYQrN0T0S4pnqhKD1CYPpdArBkNezUYAjS725FkApuK+mnBX3U\n0msBffEaUEOkcyar1EW2m/33vpetD/k3eQQkmvQf4Hbiu9AF+9cNDm/hMuXEw5EX\nGA91fn0891b5eEW8BJHXX0jri0aN8g==\n-----END CERTIFICATE-----\n","expires":"2031-12-21T18:42:52.000Z","subject":{"commonName":"test-client1","countryName":"US","localityName":"SVL","organizationName":"gRPC","stateOrProvinceName":"CA"},"fieldsMap":{},"signingCert":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZzakNDQTVxZ0F3SUJBZ0lVUnlnVk1NemRyK1E3cnNVYXoxODlKb3p5SE13d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1RqRUxNQWtHQTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdNQWtOQk1Rd3dDZ1lEVlFRSERBTlRWa3d4RFRBTApCZ05WQkFvTUJHZFNVRU14RlRBVEJnTlZCQU1NREhSbGMzUXRZMnhwWlc1ME1UQWVGdzB5TVRFeU1qTXhPRFF5Ck5USmFGdzB6TVRFeU1qRXhPRFF5TlRKYU1FNHhDekFKQmdOVkJBWVRBbFZUTVFzd0NRWURWUVFJREFKRFFURU0KTUFvR0ExVUVCd3dEVTFaTU1RMHdDd1lEVlFRS0RBUm5VbEJETVJVd0V3WURWUVFEREF4MFpYTjBMV05zYVdWdQpkREV3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRREo0QXFwR2V0eVZTcUdVdUJKCkxWRmxhKzdiRWZjYTdVWXpmVlNTWkxaL1grSkRtV0lWTjhVSVB1RmliNWpoTUVjM1hhVW5GWFVtTTd6RXR6L1oKRzVoYXB3THdPYjJDM1p4T1A2UFFqWUNKeGJrTGllK2I0M1VRckZ1MXh4ZDN2TWhWSmdjai9BSXhFcG1zenVxTwphNmtVcmtZaWZqSkFEUSs2NGtaZ2w2NmJzVGRYTUN6cHh5Rmw5eFVmZmY1OUw4T1grSFVmQWNvWnozZW1qZzNaCkpQWVVSUUVtamRaVE9hdTFFakZpbHdIZ2Q5ODlKdDdOS2d4MzBOWG9IbXc3bnVzVkJJWTk0ZkwyVktOM2YxWFYKbTBkSHU1TkkyNzlRNnpyMFpCVTdrNVQzSWVIbnpzVWVzUVM0Tkdsa2xEV29WVEtrNzNVdjlQbmE4eVFzU1c3NQo3UEViSE9HcDlLbnU0Ym5vR1BPbHNHODF5SVBpcE82aFRnR0ZLMjRwRjk3TTlrcEdiV3FZWDQrMnZMbHJDQWZjCm1zSHFhVVBtUWxZZVJWVFQ2dnc3Y3RZbzJreVVZR3RuT0RYazc2THFld1JCVnZreng3NVFVaGZqQXliNzQwWWMKRG1JZW5jNTZUcTZnZWJKSGpoRW1WU2VoUjZ4SXBYUDdTVmV1clR5aFBzRVFucEpIdGdzNGRjd1dPWnA3QnZQTgp6SFhtSnFmcjd2c3NoaWUzdlM1a1EwdTFlMXlxQXFYZ3lEanFLWE9reCtkcGdVVGVoU0pIaFBOSHZUYzVMWFJzCnZ2WEtZejZGcndSL0RaOHQ3Qk5FdlBlTGpGZ3hwSDdRVkpGTEN2Q2JYczVLNnlZYnNuTGZ4RklCUFJucmJKa0kKc0src1F3blJkbnNpVWRQc1RrRzVCMmxRZlFJREFRQUJvNEdITUlHRU1CMEdBMVVkRGdRV0JCUTJsQnAwUGlSSApIdlE1SVJVUm04YUhzajRSRVRBZkJnTlZIU01FR0RBV2dCUTJsQnAwUGlSSEh2UTVJUlVSbThhSHNqNFJFVEFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTURFR0ExVWRFUVFxTUNpR0puTndhV1ptWlRvdkwyWnZieTVpWVhJdVkyOXQKTDJOc2FXVnVkQzkzYjNKcmJHOWhaQzh4TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFBMW1Ta2dSY2xBbCtFLwphUzl6Sjd0OCtZNG4zVDI0bk9LS3ZlU0lqeFhtL3pqaFdxVnNMWUJJNmtnbFd0aWgyK1BFTHZVOEpkUHFOWkszCjRLbDBRNkZXcFZTR0RkV04xaTZOeU9SdDJvY2dnTDNrZTNpWHhSazNVcFVLSm1xd3o4MVZoQTJLVUhuTWx5RTAKSXVmRmZaTndOV1dIQnYxM3VKZlJiamVRcEtQaFUreWY0RGVYcnNXY3ZyWmxHdkFFVCttY3BsYWZVekNwN0l2KwpQY0lTSnRVZXJieGJWdHVIVmVaQ0xsZ0RYV2tMQVdKTjhyZjBkSUc0eDA2MExKK2o2ajl1UlZoYjlzWm4xSEpWCitqNFhkSVltMVZLaWxsdWhPdE53UDJkM094L0p1VEJ4ZjdoRkhYWlBmTWFnUUU1azVQem14UmFDQUVNSjFsMkQKdlViWncrc2hKZlNOb1djQm8ycWFkblVhV1QzQm1tSlJCRGg3WlJlaWIvUlExUmQ0eWdPeXpQM0UwdmtWNC9ncQp5akxkQXBYaDVQWlA4S0xRWisxSk4vc2RXdDdWZkl0OXdZT3BrSXF1amRsbDUxRVNIendRZUFLOVdWQ0I0VXZWCno2emRoSXRCOUNSYlhQcmVXQyt3Q0IxeERvdkl6RktPVnNMczUrR3FzMW03VmluRzJMeGJEcWFLeW8vRkIwSHgKeDBhY0JOemV6TFdvRHdYWVFyTjBUMFM0cG5xaEtEMUNZUHBkQXJCa05lelVZQWpTNzI1RmtBcHVLK21uQlgzVQowbXNCZmZFYVVFT2tjeWFyMUVXMm0vMzN2cGV0RC9rM2VRUWttdlFmNEhiaXU5QUYrOWNORG0vaE11WEV3NUVYCkdBOTFmbjA4OTFiNWVFVzhCSkhYWDBqcmkwYU44Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K","thumbprints":["a50f15b92a9da85db847562a9876fdcb71f3f09b"],"idpinitiated":{"enabled":true},"disableSignout":true,"signInEndpoint":"https://example.com","digestAlgorithm":"","signOutEndpoint":"","signSAMLRequest":true,"user_id_attribute":"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier","signatureAlgorithm":""},"strategy":"samlp","name":"samlp","provisioning_ticket_url":"https://terraform-provider-auth0-dev.us.auth0.com/p/samlp/2jZreSKN","is_domain_connection":false,"show_as_button":false,"realms":["samlp"],"enabled_clients":["JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_WdzxNQ8IrXra406n","options":{"from":"+15673812244","name":"sms","totp":{"length":6,"time_step":180},"syntax":"md_with_macros","template":"Your verification code is: @@password@@","twilio_sid":"ACc95b2e7e2426f6c6d795680e98c55ab5","twilio_token":"a79f8df7703809bd15cff7f5aab1ebf9","disable_signup":false,"messaging_service_sid":null,"brute_force_protection":true},"strategy":"sms","name":"sms","is_domain_connection":false,"realms":["sms"],"enabled_clients":["YjhE0LnX8K5EKtNyPBuokAYRWevhwOPk","LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_ydYMO17mFY5OiT4u","options":{"mfa":{"active":true,"return_enroll_settings":true},"attributes":{"email":{"signup":{"status":"required","verification":{"active":true}},"identifier":{"active":true},"profile_required":true,"verification_method":"otp"}},"import_mode":false,"configuration":{},"customScripts":{"login":"function login(email, password, callback) {\n  // This script should authenticate a user against the credentials stored in\n  // your database.\n  // It is executed when a user attempts to log in or immediately after signing\n  // up (as a verification that the user was successfully signed up).\n  //\n  // Everything returned by this script will be set as part of the user profile\n  // and will be visible by any of the tenant admins. Avoid adding attributes\n  // with values such as passwords, keys, secrets, etc.\n  //\n  // The `password` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database. For example:\n  //\n  //     var bcrypt = require(''bcrypt@0.8.5'');\n  //     bcrypt.compare(password, dbPasswordHash, function(err, res)) { ... }\n  //\n  // There are three ways this script can finish:\n  // 1. The user''s credentials are valid. The returned user profile should be in\n  // the following format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema\n  //     var profile = {\n  //       user_id: ..., // user_id is mandatory\n  //       email: ...,\n  //       [...]\n  //     };\n  //     callback(null, profile);\n  // 2. The user''s credentials are invalid\n  //     callback(new WrongUsernameOrPasswordError(email, \"my error message\"));\n  //\n  //    Note: Passing no arguments or a falsey first argument to\n  //    `WrongUsernameOrPasswordError` will result in the error being logged as\n  //    an `fu` event (invalid username/email) with an empty string for a user_id.\n  //    Providing a truthy first argument will result in the error being logged\n  //    as an `fp` event (the user exists, but the password is invalid) with a\n  //    user_id value of \"auth0|<first argument>\". See the `Log Event Type Codes`\n  //    documentation for more information about these event types:\n  //    https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n  //\n  // A list of Node.js modules which can be referenced is available here:\n  //\n  //    https://tehsis.github.io/webtaskio-canirequire/\n\n  const msg = ''Please implement the Login script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","create":"function create(user, callback) {\n  // This script should create a user entry in your existing database. It will\n  // be executed when a user attempts to sign up, or when a user is created\n  // through the Auth0 dashboard or API.\n  // When this script has finished executing, the Login script will be\n  // executed immediately afterwards, to verify that the user was created\n  // successfully.\n  //\n  // The user object will always contain the following properties:\n  // * email: the user''s email\n  // * password: the password entered by the user, in plain text\n  // * tenant: the name of this Auth0 account\n  // * client_id: the client ID of the application where the user signed up, or\n  //              API key if created through the API or Auth0 dashboard\n  // * connection: the name of this database connection\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully created\n  //     callback(null);\n  // 2. This user already exists in your database\n  //     callback(new ValidationError(\"user_exists\", \"my error message\"));\n  // 3. Something went wrong while trying to reach your database\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Create script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","delete":"function remove(id, callback) {\n  // This script remove a user from your existing database.\n  // It is executed whenever a user is deleted from the API or Auth0 dashboard.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user was removed successfully:\n  //     callback(null);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Delete script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","verify":"function verify(email, callback) {\n  // This script should mark the current user''s email address as verified in\n  // your database.\n  // It is executed whenever a user clicks the verification link sent by email.\n  // These emails can be customized at https://manage.auth0.com/#/emails.\n  // It is safe to assume that the user''s email already exists in your database,\n  // because verification emails, if enabled, are sent immediately after a\n  // successful signup.\n  //\n  // There are two ways that this script can finish:\n  // 1. The user''s email was verified successfully\n  //     callback(null, true);\n  // 2. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the verification link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Verify script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","get_user":"function getByEmail(email, callback) {\n  // This script should retrieve a user profile from your existing database,\n  // without authenticating the user.\n  // It is used to check if a user exists before executing flows that do not\n  // require authentication (signup and password reset).\n  //\n  // There are three ways this script can finish:\n  // 1. A user was successfully found. The profile should be in the following\n  // format: https://auth0.com/docs/users/normalized/auth0/normalized-user-profile-schema.\n  //     callback(null, profile);\n  // 2. A user was not found\n  //     callback(null);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n\n  const msg = ''Please implement the Get User script for this database connection '' +\n    ''at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n","change_password":"function changePassword(email, newPassword, callback) {\n  // This script should change the password stored for the current user in your\n  // database. It is executed when the user clicks on the confirmation link\n  // after a reset password request.\n  // The content and behavior of password confirmation emails can be customized\n  // here: https://manage.auth0.com/#/emails\n  // The `newPassword` parameter of this function is in plain text. It must be\n  // hashed/salted to match whatever is stored in your database.\n  //\n  // There are three ways that this script can finish:\n  // 1. The user''s password was updated successfully:\n  //     callback(null, true);\n  // 2. The user''s password was not updated:\n  //     callback(null, false);\n  // 3. Something went wrong while trying to reach your database:\n  //     callback(new Error(\"my error message\"));\n  //\n  // If an error is returned, it will be passed to the query string of the page\n  // where the user is being redirected to after clicking the confirmation link.\n  // For example, returning `callback(new Error(\"error\"))` and redirecting to\n  // https://example.com would redirect to the following URL:\n  //     https://example.com?email=alice%40example.com&message=error&success=false\n\n  const msg = ''Please implement the Change Password script for this database '' +\n    ''connection at https://manage.auth0.com/#/connections/database'';\n  return callback(new Error(msg));\n}\n"},"disable_signup":false,"passwordPolicy":"fair","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"password_history":{"size":5,"enable":false},"strategy_version":2,"password_dictionary":{"enable":false,"dictionary":[]},"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true,"password_no_personal_info":{"enable":false},"password_complexity_options":{"min_length":8},"enabledDatabaseCustomization":false},"strategy":"auth0","name":"test-db-conn","is_domain_connection":false,"realms":["test-db-conn"],"enabled_clients":["LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]},{"id":"con_83xIjpryKTaudn3K","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Username-Password-Authentication","is_domain_connection":false,"realms":["Username-Password-Authentication"],"enabled_clients":["J1l9laXEKHJIIEjSvvMzvLq2GlZ9p9aB","LeBGFyt7y2ZjvlBhqPBJwTn3dLoEhCGB","ZpHnzZlq4UA2qJn2oZ9PRawSbkbnpJqa","FLIRqmmdlFO8bgpSiI1edt3Z2ckK5Xnr","MT3xpNb0aT1Tey8brhRZJETmrelqC2Yv","y8zHiIOI5UciKi6yh6yPAQ3FpxvghHFb","JYE53yAO8J2enpkewUMxoo4LZe4r4mB0","CDzFreHgmwGQaahG7Y8rGPAYSOCNp5VG","b6g6JcinVtX9uYaVbtjEAXTVYCAPVc9O","7A3gY5j2rLPQHl4UzFUlAf9rpBCeCWVU","ltDtQeNbloAWqtmhW3HLmlF3Ogekdwna","2TXdYaVPUVJ3Ak3EQbui9wN5mL5I53Mh","8GlF3CaO9ayWk6roJ7Wm7csG8JT4WKiq","C5qOU2xRAkFls7YYLH3oEoOiysvcs2t2","kTELMnTEVedF64DRw0BkoXbHRopyKPIO","kWhMhYgd8cF2qBpEnUBUN7Ksz5t9hjkQ","YjhE0LnX8K5EKtNyPBuokAYRWevhwOPk","04RQmMXREqKY2so0OSgB1voFylaFQDSL","mJ4H8mBMeboyLIEXmV8PyWkjlDW2gym1","Cizq7JxgSY4pisDFSpZNCOZVch0iGTOS","6z9Clh7a5GtzZ2s3Sk9Edt6g11PRCRQ4","kfmLFsrSXjozNns72iTdhHKwb0rUHZxJ","19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","pzzJmtUhaXODcbiswV8rUjNHbCvo0L2O","9Zzv202haNIbq3Q8wqNY6Z48rW2mJcGb","qsH163u8AoZy8z1o6nTV3TgiZUtSfwS1","yw7HonxAl9A6tkILSUEy1mfjQBhqAxld","ddT9G458CwFyq6gqBaKcLuazBhs2M5Op"]}]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 395.713417ms
    - id: 14
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 393.040459ms
    - id: 15
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/clients/19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"name":"Acceptance Test - TestAccDataSourceConnection","client_id":"19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","client_secret":"[REDACTED]","app_type":"non_interactive","is_first_party":true,"is_token_endpoint_ip_header_trusted":false,"oidc_conformant":false,"jwt_configuration":{"secret_encoded":false,"lifetime_in_seconds":36000},"signing_keys":[{"cert":"[REDACTED]"}],"sso_disabled":false,"cross_origin_authentication":false,"grant_types":["authorization_code","implicit","refresh_token","client_credentials"],"custom_login_page_on":true,"token_endpoint_auth_method":"client_secret_post","refresh_token":{"rotation_type":"non-rotating","expiration_type":"non-expiring","leeway":0,"token_lifetime":31557600,"infinite_token_lifetime":true,"infinite_idle_token_lifetime":true,"idle_token_lifetime":2592000},"oidc_backchannel_logout":{},"oidc_logout":{"backchannel_logout_initiators":{"mode":"custom","selected_initiators":["rp-logout","idp-logout"]}}}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 413.968958ms
    - id: 16
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 365.494333ms
    - id: 17
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 556.680209ms
    - id: 18
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 363.729917ms
    - id: 19
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 344.618333ms
    - id: 20
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/clients/19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"name":"Acceptance Test - TestAccDataSourceConnection","client_id":"19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D","client_secret":"[REDACTED]","app_type":"non_interactive","is_first_party":true,"is_token_endpoint_ip_header_trusted":false,"oidc_conformant":false,"jwt_configuration":{"secret_encoded":false,"lifetime_in_seconds":36000},"signing_keys":[{"cert":"[REDACTED]"}],"sso_disabled":false,"cross_origin_authentication":false,"grant_types":["authorization_code","implicit","refresh_token","client_credentials"],"custom_login_page_on":true,"token_endpoint_auth_method":"client_secret_post","refresh_token":{"rotation_type":"non-rotating","expiration_type":"non-expiring","leeway":0,"token_lifetime":31557600,"infinite_token_lifetime":true,"infinite_idle_token_lifetime":true,"idle_token_lifetime":2592000},"oidc_backchannel_logout":{},"oidc_logout":{"backchannel_logout_initiators":{"mode":"custom","selected_initiators":["rp-logout","idp-logout"]}}}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 457.864792ms
    - id: 21
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 350.95025ms
    - id: 22
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 407.46975ms
    - id: 23
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: GET
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":["19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D"],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 381.809666ms
    - id: 24
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 25
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: |
            {"enabled_clients":null}
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: PATCH
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: -1
        uncompressed: true
        body: '{"id":"con_U8mDnLnF5ozanInI","options":{"mfa":{"active":true,"return_enroll_settings":true},"passwordPolicy":"good","passkey_options":{"challenge_ui":"both","local_enrollment_enabled":true,"progressive_enrollment_enabled":true},"strategy_version":2,"authentication_methods":{"passkey":{"enabled":false},"password":{"enabled":true}},"brute_force_protection":true},"strategy":"auth0","name":"Acceptance-Test-Connection-TestAccDataSourceConnection","is_domain_connection":false,"enabled_clients":[],"realms":["Acceptance-Test-Connection-TestAccDataSourceConnection"]}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 200 OK
        code: 200
        duration: 494.290833ms
    - id: 25
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/clients/19D5ubkqXpHD9QC6ye2dU7dzDxyjlE7D
        method: DELETE
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: 0
        uncompressed: false
        body: ""
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 204 No Content
        code: 204
        duration: 517.068916ms
    - id: 26
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 0
        transfer_encoding: []
        trailer: {}
        host: terraform-provider-auth0-dev.eu.auth0.com
        remote_addr: ""
        request_uri: ""
        body: ""
        form: {}
        headers:
            Content-Type:
                - application/json
            User-Agent:
                - Go-Auth0/1.19.0
        url: https://terraform-provider-auth0-dev.eu.auth0.com/api/v2/connections/con_U8mDnLnF5ozanInI
        method: DELETE
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        transfer_encoding: []
        trailer: {}
        content_length: 41
        uncompressed: false
        body: '{"deleted_at":"2025-04-11T12:42:49.434Z"}'
        headers:
            Content-Type:
                - application/json; charset=utf-8
        status: 202 Accepted
        code: 202
        duration: 383.466709ms
